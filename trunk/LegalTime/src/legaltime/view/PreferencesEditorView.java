/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * PreferencesManager.java
 *
 * Created on Aug 1, 2009, 5:58:04 PM
 */

package legaltime.view;



import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import legaltime.AppPrefs;
import legaltime.LegalTimeApp;
import legaltime.model.Manager;
import org.jdesktop.application.Action;

/**
 *
 * @author bmartin
 */
public class PreferencesEditorView extends javax.swing.JInternalFrame {
    AppPrefs appPrefs;
    LegalTimeApp mainController;
    Manager manager;
    /** Creates new form PreferencesManager */
    public PreferencesEditorView() {
        initComponents();
        manager = Manager.getInstance();
        appPrefs = AppPrefs.getInstance();
        loadCurrentPreferences();
        txtEbackupPath.setEditable(false);
        txtInvoiceOutputPath.setEditable(false);
        txtReportOutputPath.setEditable(false);
    }
    public void setMainController(LegalTimeApp mainController_){
        mainController = mainController_;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblMysqlIp = new javax.swing.JLabel();
        txtMysqlIp = new javax.swing.JTextField();
        txtDbName = new javax.swing.JTextField();
        lblMysqlIp1 = new javax.swing.JLabel();
        cmdOk = new javax.swing.JButton();
        cmdCancel = new javax.swing.JButton();
        txtDBUserName = new javax.swing.JTextField();
        txtDBPasswd = new javax.swing.JTextField();
        lbldbPasswd = new javax.swing.JLabel();
        lblDBUserName = new javax.swing.JLabel();
        lblEBackupPath = new javax.swing.JLabel();
        txtEbackupPath = new javax.swing.JTextField();
        cmdChooseEBackupPath = new javax.swing.JButton();
        txtInvoiceOutputPath = new javax.swing.JTextField();
        cmdChooseInvoiceOutputPath = new javax.swing.JButton();
        lblInvoiceOutputPath = new javax.swing.JLabel();
        cmdChooseReportOutputPath = new javax.swing.JButton();
        lblReportOutputPath = new javax.swing.JLabel();
        txtReportOutputPath = new javax.swing.JTextField();
        lblConnectionString = new javax.swing.JLabel();
        lblConnectionStringValue = new javax.swing.JLabel();

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(legaltime.LegalTimeApp.class).getContext().getResourceMap(PreferencesEditorView.class);
        setTitle(resourceMap.getString("Form.title")); // NOI18N
        setName("Form"); // NOI18N

        lblMysqlIp.setText(resourceMap.getString("lblMysqlIp.text")); // NOI18N
        lblMysqlIp.setName("lblMysqlIp"); // NOI18N

        txtMysqlIp.setText(resourceMap.getString("txtMysqlIp.text")); // NOI18N
        txtMysqlIp.setName("txtMysqlIp"); // NOI18N

        txtDbName.setName("txtDbName"); // NOI18N

        lblMysqlIp1.setText(resourceMap.getString("lblMysqlIp1.text")); // NOI18N
        lblMysqlIp1.setName("lblMysqlIp1"); // NOI18N

        javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance(legaltime.LegalTimeApp.class).getContext().getActionMap(PreferencesEditorView.class, this);
        cmdOk.setAction(actionMap.get("saveAndClose")); // NOI18N
        cmdOk.setText(resourceMap.getString("cmdOk.text")); // NOI18N
        cmdOk.setName("cmdOk"); // NOI18N

        cmdCancel.setAction(actionMap.get("closeWindow")); // NOI18N
        cmdCancel.setText(resourceMap.getString("cmdCancel.text")); // NOI18N
        cmdCancel.setName("cmdCancel"); // NOI18N

        txtDBUserName.setName("txtDBUserName"); // NOI18N

        txtDBPasswd.setName("txtDBPasswd"); // NOI18N

        lbldbPasswd.setText(resourceMap.getString("lbldbPasswd.text")); // NOI18N
        lbldbPasswd.setName("lbldbPasswd"); // NOI18N

        lblDBUserName.setText(resourceMap.getString("lblDBUserName.text")); // NOI18N
        lblDBUserName.setName("lblDBUserName"); // NOI18N

        lblEBackupPath.setText(resourceMap.getString("lblEBackupPath.text")); // NOI18N
        lblEBackupPath.setName("lblEBackupPath"); // NOI18N

        txtEbackupPath.setName("txtEbackupPath"); // NOI18N

        cmdChooseEBackupPath.setAction(actionMap.get("ChooseEBackupPath")); // NOI18N
        cmdChooseEBackupPath.setText(resourceMap.getString("cmdChooseEBackupPath.text")); // NOI18N
        cmdChooseEBackupPath.setName("cmdChooseEBackupPath"); // NOI18N

        txtInvoiceOutputPath.setName("txtInvoiceOutputPath"); // NOI18N

        cmdChooseInvoiceOutputPath.setAction(actionMap.get("ChooseInvoiceOutputPath")); // NOI18N
        cmdChooseInvoiceOutputPath.setText(resourceMap.getString("cmdChooseInvoiceOutputPath.text")); // NOI18N
        cmdChooseInvoiceOutputPath.setName("cmdChooseInvoiceOutputPath"); // NOI18N

        lblInvoiceOutputPath.setText(resourceMap.getString("lblInvoiceOutputPath.text")); // NOI18N
        lblInvoiceOutputPath.setName("lblInvoiceOutputPath"); // NOI18N

        cmdChooseReportOutputPath.setAction(actionMap.get("ChooseReportOutputPath")); // NOI18N
        cmdChooseReportOutputPath.setText(resourceMap.getString("cmdChooseReportOutputPath.text")); // NOI18N
        cmdChooseReportOutputPath.setName("cmdChooseReportOutputPath"); // NOI18N

        lblReportOutputPath.setText(resourceMap.getString("lblReportOutputPath.text")); // NOI18N
        lblReportOutputPath.setName("lblReportOutputPath"); // NOI18N

        txtReportOutputPath.setName("txtReportOutputPath"); // NOI18N

        lblConnectionString.setText(resourceMap.getString("lblConnectionString.text")); // NOI18N
        lblConnectionString.setName("lblConnectionString"); // NOI18N

        lblConnectionStringValue.setText(resourceMap.getString("lblConnectionStringValue.text")); // NOI18N
        lblConnectionStringValue.setName("lblConnectionStringValue"); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(114, 114, 114)
                        .addComponent(cmdOk, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(cmdCancel))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(49, 49, 49)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblMysqlIp)
                                .addGap(20, 20, 20))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(lblDBUserName)
                                    .addComponent(lblMysqlIp1)
                                    .addComponent(lbldbPasswd)
                                    .addComponent(lblEBackupPath))
                                .addGap(18, 18, 18)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(txtEbackupPath, javax.swing.GroupLayout.PREFERRED_SIZE, 445, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cmdChooseEBackupPath))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(txtDBUserName, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(txtDBPasswd, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 159, Short.MAX_VALUE))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(txtMysqlIp, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(txtDbName, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 159, Short.MAX_VALUE)))))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(77, Short.MAX_VALUE)
                .addComponent(lblInvoiceOutputPath)
                .addGap(18, 18, 18)
                .addComponent(txtInvoiceOutputPath, javax.swing.GroupLayout.PREFERRED_SIZE, 445, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cmdChooseInvoiceOutputPath)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(79, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lblConnectionString)
                    .addComponent(lblReportOutputPath))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(lblConnectionStringValue, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txtReportOutputPath, javax.swing.GroupLayout.DEFAULT_SIZE, 445, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cmdChooseReportOutputPath)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblMysqlIp)
                    .addComponent(txtMysqlIp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtDbName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblMysqlIp1))
                .addGap(8, 8, 8)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtDBUserName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblDBUserName))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtDBPasswd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbldbPasswd))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtEbackupPath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblEBackupPath)
                    .addComponent(cmdChooseEBackupPath))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtInvoiceOutputPath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblInvoiceOutputPath)
                    .addComponent(cmdChooseInvoiceOutputPath))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtReportOutputPath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblReportOutputPath)
                    .addComponent(cmdChooseReportOutputPath))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblConnectionString)
                    .addComponent(lblConnectionStringValue))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 13, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmdOk)
                    .addComponent(cmdCancel))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cmdCancel;
    private javax.swing.JButton cmdChooseEBackupPath;
    private javax.swing.JButton cmdChooseInvoiceOutputPath;
    private javax.swing.JButton cmdChooseReportOutputPath;
    private javax.swing.JButton cmdOk;
    private javax.swing.JLabel lblConnectionString;
    private javax.swing.JLabel lblConnectionStringValue;
    private javax.swing.JLabel lblDBUserName;
    private javax.swing.JLabel lblEBackupPath;
    private javax.swing.JLabel lblInvoiceOutputPath;
    private javax.swing.JLabel lblMysqlIp;
    private javax.swing.JLabel lblMysqlIp1;
    private javax.swing.JLabel lblReportOutputPath;
    private javax.swing.JLabel lbldbPasswd;
    private javax.swing.JTextField txtDBPasswd;
    private javax.swing.JTextField txtDBUserName;
    private javax.swing.JTextField txtDbName;
    private javax.swing.JTextField txtEbackupPath;
    private javax.swing.JTextField txtInvoiceOutputPath;
    private javax.swing.JTextField txtMysqlIp;
    private javax.swing.JTextField txtReportOutputPath;
    // End of variables declaration//GEN-END:variables


    private void savePreferences(){
        appPrefs.getPrefs().put(AppPrefs.MYSQL_IP, txtMysqlIp.getText());
        appPrefs.getPrefs().put(AppPrefs.DB_NAME, txtDbName.getText());
        appPrefs.getPrefs().put(AppPrefs.JDBC_USER, txtDBUserName.getText());
        appPrefs.getPrefs().put(AppPrefs.JDBC_PASSWD, txtDBPasswd.getText());
        appPrefs.getPrefs().put(AppPrefs.EBACKUP_PATH, txtEbackupPath.getText());
        appPrefs.getPrefs().put(AppPrefs.INVOICE_OUTPUT_PATH, txtInvoiceOutputPath.getText());
        appPrefs.getPrefs().put(AppPrefs.REPORT_OUTPUT_PATH, txtReportOutputPath.getText());
    }
    private void loadCurrentPreferences(){
        txtMysqlIp.setText(appPrefs.getPrefs().get(AppPrefs.MYSQL_IP, AppPrefs.NOT_SET));
        txtDbName.setText(appPrefs.getPrefs().get(AppPrefs.DB_NAME, AppPrefs.NOT_SET));
        txtDBUserName.setText(appPrefs.getPrefs().get(AppPrefs.JDBC_USER,AppPrefs.NOT_SET ));
        txtDBPasswd.setText(appPrefs.getPrefs().get(AppPrefs.JDBC_PASSWD,AppPrefs.NOT_SET ));
        txtEbackupPath.setText(appPrefs.getPrefs().get(AppPrefs.EBACKUP_PATH,AppPrefs.NOT_SET ));
        txtInvoiceOutputPath.setText(appPrefs.getPrefs().get(AppPrefs.INVOICE_OUTPUT_PATH,AppPrefs.NOT_SET ));
        txtReportOutputPath.setText(appPrefs.getPrefs().get(AppPrefs.REPORT_OUTPUT_PATH,AppPrefs.NOT_SET ));
        
            lblConnectionStringValue.setText(manager.getJdbcUrl(title));
        
    }

    @Action
    public void saveAndClose(){
        savePreferences();
        closeWindow();
    }

    @Action
    public void closeWindow(){
        this.setVisible(false);
        doDefaultCloseAction();

    }


    @Action
    public void ChooseEBackupPath(){
        FileChooserView fileChooserView =
                    new FileChooserView(mainController.getMainFrame());
        fileChooserView.setFileSelectionMode(FileChooserView.DIRECTORIES);
        fileChooserView.setVisible(true);
        if(fileChooserView.isSelectionConfirmed()){
            txtEbackupPath.setText( fileChooserView.getSelectedFilePath());
        }
        fileChooserView.dispose();

    }

    @Action
    public void ChooseInvoiceOutputPath(){
        FileChooserView fileChooserView =
                    new FileChooserView(mainController.getMainFrame());
        fileChooserView.setFileSelectionMode(FileChooserView.DIRECTORIES);
        fileChooserView.setVisible(true);
        if(fileChooserView.isSelectionConfirmed()){
            txtInvoiceOutputPath.setText( fileChooserView.getSelectedFilePath());
        }
        fileChooserView.dispose();

    }
    @Action
    public void ChooseReportOutputPath(){
        FileChooserView fileChooserView =
                    new FileChooserView(mainController.getMainFrame());
        fileChooserView.setFileSelectionMode(FileChooserView.DIRECTORIES);
        fileChooserView.setVisible(true);
        if(fileChooserView.isSelectionConfirmed()){
            txtReportOutputPath.setText( fileChooserView.getSelectedFilePath());
        }
        fileChooserView.dispose();

    }
}
