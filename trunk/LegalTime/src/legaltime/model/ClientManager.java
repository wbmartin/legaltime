// ______________________________________________________
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: com.mysql.jdbc.Driver
//
// Please help us improve this tool by reporting:
// - problems and suggestions to
//   http://sourceforge.net/tracker/?group_id=54687
// - feedbacks and ideas on
//   http://sourceforge.net/forum/forum.php?forum_id=182208
// ______________________________________________________

package legaltime.model;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.Types;
import java.util.List;
import java.util.ArrayList;

import legaltime.model.Manager;
import legaltime.model.exception.DAOException;
import legaltime.model.exception.DataAccessException;
import legaltime.model.exception.ObjectRetrievalException;
import legaltime.model.ClientAccountRegisterBean;
import legaltime.model.ClientAccountRegisterManager;
import legaltime.model.FollowupBean;
import legaltime.model.FollowupManager;
import legaltime.model.InvoiceBean;
import legaltime.model.InvoiceManager;
import legaltime.model.LaborRegisterBean;
import legaltime.model.LaborRegisterManager;

/**
 * Handles database calls (save, load, count, etc...) for the client table.
 * @author sql2java
 */
public class ClientManager 
{

    /* set =QUERY for loadUsingTemplate */
    public static final int SEARCH_EXACT = 0;
    /* set %QUERY% for loadLikeTemplate */
    public static final int SEARCH_LIKE = 1;
    /* set %QUERY for loadLikeTemplate */
    public static final int SEARCH_STARTING_LIKE = 2;
    /* set QUERY% for loadLikeTemplate */
    public static final int SEARCH_ENDING_LIKE = 3;

    /**
     * Identify the last_update field.
     */
    public static final int ID_LAST_UPDATE = 0;

    /**
     * Identify the active_yn field.
     */
    public static final int ID_ACTIVE_YN = 1;

    /**
     * Identify the monthly_bill_rate field.
     */
    public static final int ID_MONTHLY_BILL_RATE = 2;

    /**
     * Identify the bill_type field.
     */
    public static final int ID_BILL_TYPE = 3;

    /**
     * Identify the note field.
     */
    public static final int ID_NOTE = 4;

    /**
     * Identify the client_since_dt field.
     */
    public static final int ID_CLIENT_SINCE_DT = 5;

    /**
     * Identify the email field.
     */
    public static final int ID_EMAIL = 6;

    /**
     * Identify the fax field.
     */
    public static final int ID_FAX = 7;

    /**
     * Identify the cell_phone field.
     */
    public static final int ID_CELL_PHONE = 8;

    /**
     * Identify the home_phone field.
     */
    public static final int ID_HOME_PHONE = 9;

    /**
     * Identify the work_phone field.
     */
    public static final int ID_WORK_PHONE = 10;

    /**
     * Identify the zip field.
     */
    public static final int ID_ZIP = 11;

    /**
     * Identify the state field.
     */
    public static final int ID_STATE = 12;

    /**
     * Identify the city field.
     */
    public static final int ID_CITY = 13;

    /**
     * Identify the address field.
     */
    public static final int ID_ADDRESS = 14;

    /**
     * Identify the last_name field.
     */
    public static final int ID_LAST_NAME = 15;

    /**
     * Identify the first_name field.
     */
    public static final int ID_FIRST_NAME = 16;

    /**
     * Identify the client_id field.
     */
    public static final int ID_CLIENT_ID = 17;

    /**
     * Contains all the full fields of the client table.
     */
    private static final String[] FULL_FIELD_NAMES =
    {
        "client.last_update"
        ,"client.active_yn"
        ,"client.monthly_bill_rate"
        ,"client.bill_type"
        ,"client.note"
        ,"client.client_since_dt"
        ,"client.email"
        ,"client.fax"
        ,"client.cell_phone"
        ,"client.home_phone"
        ,"client.work_phone"
        ,"client.zip"
        ,"client.state"
        ,"client.city"
        ,"client.address"
        ,"client.last_name"
        ,"client.first_name"
        ,"client.client_id"
    };

    /**
     * Contains all the fields of the client table.
     */
    public static final String[] FIELD_NAMES =
    {
        "last_update"
        ,"active_yn"
        ,"monthly_bill_rate"
        ,"bill_type"
        ,"note"
        ,"client_since_dt"
        ,"email"
        ,"fax"
        ,"cell_phone"
        ,"home_phone"
        ,"work_phone"
        ,"zip"
        ,"state"
        ,"city"
        ,"address"
        ,"last_name"
        ,"first_name"
        ,"client_id"
    };

    /**
     * Field that contains the comma separated fields of the client table.
     */
    public static final String ALL_FULL_FIELDS = "client.last_update"
                            + ",client.active_yn"
                            + ",client.monthly_bill_rate"
                            + ",client.bill_type"
                            + ",client.note"
                            + ",client.client_since_dt"
                            + ",client.email"
                            + ",client.fax"
                            + ",client.cell_phone"
                            + ",client.home_phone"
                            + ",client.work_phone"
                            + ",client.zip"
                            + ",client.state"
                            + ",client.city"
                            + ",client.address"
                            + ",client.last_name"
                            + ",client.first_name"
                            + ",client.client_id";

    /**
     * Field that contains the comma separated fields of the client table.
     */
    public static final String ALL_FIELDS = "last_update"
                            + ",active_yn"
                            + ",monthly_bill_rate"
                            + ",bill_type"
                            + ",note"
                            + ",client_since_dt"
                            + ",email"
                            + ",fax"
                            + ",cell_phone"
                            + ",home_phone"
                            + ",work_phone"
                            + ",zip"
                            + ",state"
                            + ",city"
                            + ",address"
                            + ",last_name"
                            + ",first_name"
                            + ",client_id";

    private static ClientManager singleton = new ClientManager();

    /**
     * Get the ClientManager singleton.
     *
     * @return ClientManager
     */
    public static ClientManager getInstance()
    {
        return singleton;
    }


    /**
     * Creates a new ClientBean instance.
     *
     * @return the new ClientBean
     */
    public ClientBean createClientBean()
    {
        return new ClientBean();
    }

    //////////////////////////////////////
    // PRIMARY KEY METHODS
    //////////////////////////////////////

    /**
     * Loads a ClientBean from the client using its key fields.
     *
     * @param clientId Integer - PK# 1
     * @return a unique ClientBean
     * @throws DAOException
     */
    //1
    public ClientBean loadByPrimaryKey(Integer clientId) throws DAOException
    {
        Connection c = null;
        PreparedStatement ps = null;
        try
        {
            c = this.getConnection();
            StringBuffer sql = new StringBuffer("SELECT " + ALL_FIELDS + " FROM client WHERE client_id=?");
            // System.out.println("loadByPrimaryKey: " + sql);
            ps = c.prepareStatement(sql.toString(),
                                    ResultSet.TYPE_SCROLL_INSENSITIVE,
                                    ResultSet.CONCUR_READ_ONLY);
            if (clientId == null) { ps.setNull(1, Types.INTEGER); } else { Manager.setInteger(ps, 1, clientId); }
            ClientBean pReturn[] = this.loadByPreparedStatement(ps);
            if (pReturn.length < 1) {
                throw new ObjectRetrievalException();
            } else {
                return pReturn[0];
            }
        }
        catch(SQLException e)
        {
            throw new ObjectRetrievalException(e);
        }
        finally
        {
            this.getManager().close(ps);
            this.freeConnection(c);
        }
    }

    /**
     * Deletes rows according to its keys.
     *
     * @param clientId Integer - PK# 1
     * @return the number of deleted rows
     * @throws DAOException
     */
    //2
    public int deleteByPrimaryKey(Integer clientId) throws DAOException
    {
        Connection c = null;
        PreparedStatement ps = null;
        try
        {
            c = this.getConnection();
            StringBuffer sql = new StringBuffer("DELETE FROM client WHERE client_id=?");
            // System.out.println("deleteByPrimaryKey: " + sql);
            ps = c.prepareStatement(sql.toString(),
                                    ResultSet.TYPE_SCROLL_INSENSITIVE,
                                    ResultSet.CONCUR_READ_ONLY);
            if (clientId == null) { ps.setNull(1, Types.INTEGER); } else { Manager.setInteger(ps, 1, clientId); }
            return ps.executeUpdate();
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            this.getManager().close(ps);
            this.freeConnection(c);
        }
    }

    //////////////////////////////////////
    // GET/SET IMPORTED KEY BEAN METHOD
    //////////////////////////////////////
    /**
     * Retrieves the ClientAccountRegisterBean object from the client.client_id field.
     *
     * @param bean the ClientBean
     * @return the associated ClientAccountRegisterBean bean
     * @throws DAOException
     */
    //3.1 GET IMPORTED
    public ClientAccountRegisterBean[] getClientAccountRegisterBeans(ClientBean bean) throws DAOException
    {
        ClientAccountRegisterBean other = ClientAccountRegisterManager.getInstance().createClientAccountRegisterBean();
        other.setClientId(bean.getClientId());
        return ClientAccountRegisterManager.getInstance().loadUsingTemplate(other);
    }

    /**
     * Associates the ClientBean object to the ClientAccountRegisterBean object.
     *
     * @param bean the ClientBean object to use
     * @param beanToSet the ClientAccountRegisterBean object to associate to the ClientBean
     * @return the associated ClientAccountRegisterBean bean
     */
    //4.1 SET IMPORTED
    public ClientBean setClientAccountRegisterBean(ClientBean bean,ClientAccountRegisterBean beanToSet)
    {
        bean.setClientId(beanToSet.getClientId());
        return bean;
    }

    /**
     * Retrieves the FollowupBean object from the client.client_id field.
     *
     * @param bean the ClientBean
     * @return the associated FollowupBean bean
     * @throws DAOException
     */
    //3.1 GET IMPORTED
    public FollowupBean[] getFollowupBeans(ClientBean bean) throws DAOException
    {
        FollowupBean other = FollowupManager.getInstance().createFollowupBean();
        other.setClientId(bean.getClientId());
        return FollowupManager.getInstance().loadUsingTemplate(other);
    }

    /**
     * Associates the ClientBean object to the FollowupBean object.
     *
     * @param bean the ClientBean object to use
     * @param beanToSet the FollowupBean object to associate to the ClientBean
     * @return the associated FollowupBean bean
     */
    //4.1 SET IMPORTED
    public ClientBean setFollowupBean(ClientBean bean,FollowupBean beanToSet)
    {
        bean.setClientId(beanToSet.getClientId());
        return bean;
    }

    /**
     * Retrieves the InvoiceBean object from the client.client_id field.
     *
     * @param bean the ClientBean
     * @return the associated InvoiceBean bean
     * @throws DAOException
     */
    //3.1 GET IMPORTED
    public InvoiceBean[] getInvoiceBeans(ClientBean bean) throws DAOException
    {
        InvoiceBean other = InvoiceManager.getInstance().createInvoiceBean();
        other.setClientId(bean.getClientId());
        return InvoiceManager.getInstance().loadUsingTemplate(other);
    }

    /**
     * Associates the ClientBean object to the InvoiceBean object.
     *
     * @param bean the ClientBean object to use
     * @param beanToSet the InvoiceBean object to associate to the ClientBean
     * @return the associated InvoiceBean bean
     */
    //4.1 SET IMPORTED
    public ClientBean setInvoiceBean(ClientBean bean,InvoiceBean beanToSet)
    {
        bean.setClientId(beanToSet.getClientId());
        return bean;
    }

    /**
     * Retrieves the LaborRegisterBean object from the client.client_id field.
     *
     * @param bean the ClientBean
     * @return the associated LaborRegisterBean bean
     * @throws DAOException
     */
    //3.1 GET IMPORTED
    public LaborRegisterBean[] getLaborRegisterBeans(ClientBean bean) throws DAOException
    {
        LaborRegisterBean other = LaborRegisterManager.getInstance().createLaborRegisterBean();
        other.setClientId(bean.getClientId());
        return LaborRegisterManager.getInstance().loadUsingTemplate(other);
    }

    /**
     * Associates the ClientBean object to the LaborRegisterBean object.
     *
     * @param bean the ClientBean object to use
     * @param beanToSet the LaborRegisterBean object to associate to the ClientBean
     * @return the associated LaborRegisterBean bean
     */
    //4.1 SET IMPORTED
    public ClientBean setLaborRegisterBean(ClientBean bean,LaborRegisterBean beanToSet)
    {
        bean.setClientId(beanToSet.getClientId());
        return bean;
    }




    //////////////////////////////////////
    // LOAD ALL
    //////////////////////////////////////

    /**
     * Loads all the rows from client.
     *
     * @return an array of ClientManager bean
     * @throws DAOException
     */
    //5
    public ClientBean[] loadAll() throws DAOException
    {
        return this.loadUsingTemplate(null);
    }


    /**
     * Loads the given number of rows from client, given the start row.
     *
     * @param startRow the start row to be used (first row = 1, last row = -1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @return an array of ClientManager bean
     * @throws DAOException
     */
    //6
    public ClientBean[] loadAll(int startRow, int numRows) throws DAOException
    {
        return this.loadUsingTemplate(null, startRow, numRows);
    }

    //////////////////////////////////////
    // SQL 'WHERE' METHOD
    //////////////////////////////////////
    /**
     * Retrieves an array of ClientBean given a sql 'where' clause.
     *
     * @param where the sql 'where' clause
     * @return the resulting ClientBean table
     * @throws DAOException
     */
    //7
    public ClientBean[] loadByWhere(String where) throws DAOException
    {
        return this.loadByWhere(where, null);
    }

    /**
     * Retrieves an array of ClientBean given a sql where clause, and a list of fields.
     * It is up to you to pass the 'WHERE' in your where clausis.
     *
     * @param where the sql 'WHERE' clause
     * @param fieldList array of field's ID
     * @return the resulting ClientBean table
     * @throws DAOException
     */
    //8
    public ClientBean[] loadByWhere(String where, int[] fieldList) throws DAOException
    {
        return this.loadByWhere(where, fieldList, 1, -1);
    }

    /**
     * Retrieves an array of ClientBean given a sql where clause and a list of fields, and startRow and numRows.
     * It is up to you to pass the 'WHERE' in your where clausis.
     *
     * @param where the sql 'where' clause
     * @param startRow the start row to be used (first row = 1, last row = -1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @param fieldList table of the field's associated constants
     * @return the resulting ClientBean table
     * @throws DAOException
     */
    //9
    public ClientBean[] loadByWhere(String where, int[] fieldList, int startRow, int numRows) throws DAOException
    {
        StringBuffer sql = new StringBuffer(128);
        if(fieldList == null) {
            sql.append("SELECT ").append(ALL_FIELDS).append(" FROM client ").append(where);
        } else
        {
            sql.append("SELECT ");
            for(int i = 0; i < fieldList.length; i++)
            {
                if(i != 0) {
                    sql.append(",");
                }
                sql.append(FULL_FIELD_NAMES[fieldList[i]]);
            }
            sql.append(" FROM client ");
            sql.append(where);
        }
        Connection c = null;
        Statement st = null;
        ResultSet rs =  null;
        // System.out.println("loadByWhere: " + sql);
        try
        {
            c = this.getConnection();
            st = c.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            rs = st.executeQuery(sql.toString());
            return this.decodeResultSet(rs, fieldList, startRow, numRows);
        }
        catch(SQLException e)
        {
            throw new ObjectRetrievalException(e);
        }
        finally
        {
            sql = null;
            this.getManager().close(st, rs);
            this.freeConnection(c);
        }
    }


    /**
     * Deletes all rows from client table.
     * @return the number of deleted rows.
     * @throws DAOException
     */
    //10
    public int deleteAll() throws DAOException
    {
        return this.deleteByWhere("");
    }


    /**
     * Deletes rows from the client table using a 'where' clause.
     * It is up to you to pass the 'WHERE' in your where clausis.
     * <br>Attention, if 'WHERE' is omitted it will delete all records.
     *
     * @param where the sql 'where' clause
     * @return the number of deleted rows
     * @throws DAOException
     */
    //11
    public int deleteByWhere(String where) throws DAOException
    {
        Connection c = null;
        PreparedStatement ps = null;

        try
        {
            c = this.getConnection();
            StringBuffer sql = new StringBuffer("DELETE FROM client " + where);
            // System.out.println("deleteByWhere: " + sql);
            ps = c.prepareStatement(sql.toString());
            return ps.executeUpdate();
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            this.getManager().close(ps);
            this.freeConnection(c);
        }
    }

    //_____________________________________________________________________
    //
    // SAVE
    //_____________________________________________________________________
    /**
     * Saves the ClientBean bean into the database.
     *
     * @param bean the ClientBean bean to be saved
     * @return the inserted or updated bean
     * @throws DAOException
     */
    //12
    public ClientBean save(ClientBean bean) throws DAOException
    {
        if (bean.isNew()) {
            return this.insert(bean);
        } else {
            return this.update(bean);
        }
    }

    /**
     * Insert the ClientBean bean into the database.
     *
     * @param bean the ClientBean bean to be saved
     * @return the inserted bean
     * @throws DAOException
     */
    //13
    public ClientBean insert(ClientBean bean) throws DAOException
    {
        // mini checks
        if (!bean.isModified()) {
            return bean; // should not we log something ?
        }
        if (!bean.isNew()){
            return this.update(bean);
        }

        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer sql = null;

        try
        {
            c = this.getConnection();
            this.beforeInsert(bean); // listener callback
            int _dirtyCount = 0;
            sql = new StringBuffer("INSERT into client (");

            if (bean.isLastUpdateModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("last_update");
                _dirtyCount++;
            }

            if (bean.isActiveYnModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("active_yn");
                _dirtyCount++;
            }

            if (bean.isMonthlyBillRateModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("monthly_bill_rate");
                _dirtyCount++;
            }

            if (bean.isBillTypeModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("bill_type");
                _dirtyCount++;
            }

            if (bean.isNoteModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("note");
                _dirtyCount++;
            }

            if (bean.isClientSinceDtModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("client_since_dt");
                _dirtyCount++;
            }

            if (bean.isEmailModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("email");
                _dirtyCount++;
            }

            if (bean.isFaxModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("fax");
                _dirtyCount++;
            }

            if (bean.isCellPhoneModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("cell_phone");
                _dirtyCount++;
            }

            if (bean.isHomePhoneModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("home_phone");
                _dirtyCount++;
            }

            if (bean.isWorkPhoneModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("work_phone");
                _dirtyCount++;
            }

            if (bean.isZipModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("zip");
                _dirtyCount++;
            }

            if (bean.isStateModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("state");
                _dirtyCount++;
            }

            if (bean.isCityModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("city");
                _dirtyCount++;
            }

            if (bean.isAddressModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("address");
                _dirtyCount++;
            }

            if (bean.isLastNameModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("last_name");
                _dirtyCount++;
            }

            if (bean.isFirstNameModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("first_name");
                _dirtyCount++;
            }

            if (bean.isClientIdModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("client_id");
                _dirtyCount++;
            }

            sql.append(") values (");
            if(_dirtyCount > 0) {
                sql.append("?");
                for(int i = 1; i < _dirtyCount; i++) {
                    sql.append(",?");
                }
            }
            sql.append(")");


            // System.out.println("insert : " + sql.toString());

            ps = c.prepareStatement(sql.toString(), ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);

            this.fillPreparedStatement(ps, bean, SEARCH_EXACT);

            ps.executeUpdate();

            if (!bean.isClientIdModified())
            {
                PreparedStatement ps2 = null;
                ResultSet rs = null;
                try {
                    ps2 = c.prepareStatement("SELECT last_insert_id()");
                    rs = ps2.executeQuery();
                    if(rs.next()) {
                        bean.setClientId(Manager.getInteger(rs, 1));
                    } else {
                        this.getManager().log("ATTENTION: Could not retrieve generated key!");
                    }
                } finally {
                    this.getManager().close(ps2, rs);
                }
            }

            bean.isNew(false);
            bean.resetIsModified();
            this.afterInsert(bean); // listener callback
            return bean;
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            sql = null;
            this.getManager().close(ps);
            this.freeConnection(c);
        }
    }

    /**
     * Update the ClientBean bean record in the database according to the changes.
     *
     * @param bean the ClientBean bean to be updated
     * @return the updated bean
     * @throws DAOException
     */
    //14
    public ClientBean update(ClientBean bean) throws DAOException
    {
        // mini checks
        if (!bean.isModified()) {
            return bean; // should not we log something ?
        }
        if (bean.isNew()){
            return this.insert(bean);
        }

        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer sql = null;

        try
        {
            c = this.getConnection();

            this.beforeUpdate(bean); // listener callback
            sql = new StringBuffer("UPDATE client SET ");
            boolean useComma=false;

            if (bean.isLastUpdateModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("last_update=?");
            }

            if (bean.isActiveYnModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("active_yn=?");
            }

            if (bean.isMonthlyBillRateModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("monthly_bill_rate=?");
            }

            if (bean.isBillTypeModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("bill_type=?");
            }

            if (bean.isNoteModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("note=?");
            }

            if (bean.isClientSinceDtModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("client_since_dt=?");
            }

            if (bean.isEmailModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("email=?");
            }

            if (bean.isFaxModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("fax=?");
            }

            if (bean.isCellPhoneModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("cell_phone=?");
            }

            if (bean.isHomePhoneModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("home_phone=?");
            }

            if (bean.isWorkPhoneModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("work_phone=?");
            }

            if (bean.isZipModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("zip=?");
            }

            if (bean.isStateModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("state=?");
            }

            if (bean.isCityModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("city=?");
            }

            if (bean.isAddressModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("address=?");
            }

            if (bean.isLastNameModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("last_name=?");
            }

            if (bean.isFirstNameModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("first_name=?");
            }

            if (bean.isClientIdModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("client_id=?");
            }
            sql.append(" WHERE ");
            sql.append("client_id=?");
            // System.out.println("update : " + sql.toString());
            ps = c.prepareStatement(sql.toString(),
                                    ResultSet.TYPE_SCROLL_INSENSITIVE,
                                    ResultSet.CONCUR_READ_ONLY);

            int _dirtyCount = this.fillPreparedStatement(ps, bean, SEARCH_EXACT);

            if (_dirtyCount == 0) {
                // System.out.println("The bean to look is not initialized... do not update.");
                return bean;
            }

            if (bean.getClientId() == null) { ps.setNull(++_dirtyCount, Types.INTEGER); } else { Manager.setInteger(ps, ++_dirtyCount, bean.getClientId()); }
            ps.executeUpdate();
            bean.resetIsModified();
            this.afterUpdate(bean); // listener callback

            return bean;
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            sql = null;
            this.getManager().close(ps);
            this.freeConnection(c);
        }
    }

    /**
     * Saves an array of ClientBean beans into the database.
     *
     * @param beans the ClientBean bean table to be saved
     * @return the saved ClientBean array.
     * @throws DAOException
     */
    //15
    public ClientBean[] save(ClientBean[] beans) throws DAOException
    {
        for (int iIndex = 0; iIndex < beans.length; iIndex ++)
        {
            this.save(beans[iIndex]);
        }
        return beans;
    }

    /**
     * Insert an array of ClientBean beans into the database.
     *
     * @param beans the ClientBean bean table to be inserted
     * @return the saved ClientBean array.
     * @throws DAOException
     */
    //16
    public ClientBean[] insert(ClientBean[] beans) throws DAOException
    {
        return this.save(beans);
    }

    /**
     * Updates an array of ClientBean beans into the database.
     *
     * @param beans the ClientBean bean table to be inserted
     * @return the saved ClientBean array.
     * @throws DAOException
     */
    //17
    public ClientBean[] update(ClientBean[] beans) throws DAOException
    {
        return this.save(beans);
    }



    //_____________________________________________________________________
    //
    // USING TEMPLATE
    //_____________________________________________________________________
    /**
     * Loads a unique ClientBean bean from a template one giving a c
     *
     * @param bean the ClientBean bean to look for
     * @return the bean matching the template
     * @throws DAOException
     */
    //18
    public ClientBean loadUniqueUsingTemplate(ClientBean bean) throws DAOException
    {
         ClientBean[] beans = this.loadUsingTemplate(bean);
         if (beans.length == 0) {
             return null;
         }
         if (beans.length > 1) {
             throw new ObjectRetrievalException("More than one element !!");
         }
         return beans[0];
     }

    /**
     * Loads an array of ClientBean from a template one.
     *
     * @param bean the ClientBean template to look for
     * @return all the ClientBean matching the template
     * @throws DAOException
     */
    //19
    public ClientBean[] loadUsingTemplate(ClientBean bean) throws DAOException
    {
        return this.loadUsingTemplate(bean, 1, -1);
    }

    /**
     * Loads an array of ClientBean from a template one, given the start row and number of rows.
     *
     * @param bean the ClientBean template to look for
     * @param startRow the start row to be used (first row = 1, last row=-1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @return all the ClientBean matching the template
     * @throws DAOException
     */
    //20
    public ClientBean[] loadUsingTemplate(ClientBean bean, int startRow, int numRows) throws DAOException
    {
        return this.loadUsingTemplate(bean, startRow, numRows, SEARCH_EXACT);
    }

    /**
     * Loads an array of ClientBean from a template one, given the start row and number of rows.
     *
     * @param bean the ClientBean template to look for
     * @param startRow the start row to be used (first row = 1, last row=-1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @param searchType exact ?  like ? starting like ?
     * @return all the ClientBean matching the template
     * @throws DAOException
     */
    //20
    public ClientBean[] loadUsingTemplate(ClientBean bean, int startRow, int numRows, int searchType) throws DAOException
    {
        // System.out.println("loadUsingTemplate startRow:" + startRow + ", numRows:" + numRows + ", searchType:" + searchType);
        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer sql = new StringBuffer(128);
        sql.append("SELECT ").append(ALL_FIELDS).append(" FROM client ");
        StringBuffer sqlWhere = new StringBuffer("");

        try
        {
            if (this.fillWhere(sqlWhere, bean, searchType) > 0) {
                sql.append(" WHERE ").append(sqlWhere);
            } else {
               // System.out.println("The bean to look is not initialized... loading all");
            }
            // System.out.println("loadUsingTemplate: " + sql.toString());

            c = this.getConnection();
            int scrollType = ResultSet.TYPE_SCROLL_INSENSITIVE;
            if (startRow != 1) {
                scrollType = ResultSet.TYPE_SCROLL_SENSITIVE;
            }
            ps = c.prepareStatement(sql.toString(),
                                    scrollType,
                                    ResultSet.CONCUR_READ_ONLY);
            this.fillPreparedStatement(ps, bean, searchType);

            ps.executeQuery();
            return this.loadByPreparedStatement(ps, null, startRow, numRows);
        }
        catch(SQLException e)
        {
            throw new ObjectRetrievalException(e);
        }
        finally
        {
            this.getManager().close(ps);
            this.freeConnection(c);
            sql = null;
            sqlWhere = null;
        }
    }

    /**
     * Deletes rows using a ClientBean template.
     *
     * @param bean the ClientBean object(s) to be deleted
     * @return the number of deleted objects
     * @throws DAOException
     */
    //21
    public int deleteUsingTemplate(ClientBean bean) throws DAOException
    {
        if (bean.isClientIdInitialized()) {
            return this.deleteByPrimaryKey(bean.getClientId());
        }
        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer sql = new StringBuffer("DELETE FROM client ");
        StringBuffer sqlWhere = new StringBuffer("");

        try
        {
            this.beforeDelete(bean); // listener callback
            if (this.fillWhere(sqlWhere, bean, SEARCH_EXACT) > 0) {
                sql.append(" WHERE ").append(sqlWhere);
            } else {
               // System.out.println("The bean to look is not initialized... deleting all");
            }
            // System.out.println("deleteUsingTemplate: " + sql.toString());

            c = this.getConnection();
            ps = c.prepareStatement(sql.toString(),
                                    ResultSet.TYPE_SCROLL_INSENSITIVE,
                                    ResultSet.CONCUR_READ_ONLY);
            this.fillPreparedStatement(ps, bean, SEARCH_EXACT);

            int _rows = ps.executeUpdate();
            this.afterDelete(bean); // listener callback
            return _rows;
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            this.getManager().close(ps);
            this.freeConnection(c);
            sql = null;
            sqlWhere = null;
        }
    }



    //_____________________________________________________________________
    //
    // COUNT
    //_____________________________________________________________________

    /**
     * Retrieves the number of rows of the table client.
     *
     * @return the number of rows returned
     * @throws DAOException
     */
    //24
    public int countAll() throws DAOException
    {
        return this.countWhere("");
    }

    /**
     * Retrieves the number of rows of the table client with a 'where' clause.
     * It is up to you to pass the 'WHERE' in your where clausis.
     *
     * @param where the restriction clause
     * @return the number of rows returned
     * @throws DAOException
     */
    //25
    public int countWhere(String where) throws DAOException
    {
        String sql = "SELECT COUNT(*) AS MCOUNT FROM client " + where;
        // System.out.println("countWhere: " + sql);
        Connection c = null;
        Statement st = null;
        ResultSet rs =  null;
        try
        {
            int iReturn = -1;
            c = this.getConnection();
            st = c.createStatement();
            rs =  st.executeQuery(sql);
            if (rs.next())
            {
                iReturn = rs.getInt("MCOUNT");
            }
            if (iReturn != -1) {
                return iReturn;
            }
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            this.getManager().close(st, rs);
            this.freeConnection(c);
            sql = null;
        }
        throw new DataAccessException("Error in countWhere where=[" + where + "]");
    }

    /**
     * Retrieves the number of rows of the table client with a prepared statement.
     *
     * @param ps the PreparedStatement to be used
     * @return the number of rows returned
     * @throws DAOException
     */
    //26
    private int countByPreparedStatement(PreparedStatement ps) throws DAOException
    {
        ResultSet rs =  null;
        try
        {
            int iReturn = -1;
            rs = ps.executeQuery();
            if (rs.next()) {
                iReturn = rs.getInt("MCOUNT");
            }
            if (iReturn != -1) {
                return iReturn;
            }
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            this.getManager().close(rs);
        }
       throw new DataAccessException("Error in countByPreparedStatement");
    }

    /**
     * count the number of elements of a specific ClientBean bean
     *
     * @param bean the ClientBean bean to look for ant count
     * @return the number of rows returned
     * @throws DAOException
     */
    //27
    public int countUsingTemplate(ClientBean bean) throws DAOException
    {
        return this.countUsingTemplate(bean, -1, -1);
    }

    /**
     * count the number of elements of a specific ClientBean bean , given the start row and number of rows.
     *
     * @param bean the ClientBean template to look for and count
     * @param startRow the start row to be used (first row = 1, last row=-1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @return the number of rows returned
     * @throws DAOException
     */
    //20
    public int countUsingTemplate(ClientBean bean, int startRow, int numRows) throws DAOException
    {
        return this.countUsingTemplate(bean, startRow, numRows, SEARCH_EXACT);
    }

    /**
     * count the number of elements of a specific ClientBean bean given the start row and number of rows and the search type
     *
     * @param bean the ClientBean template to look for
     * @param startRow the start row to be used (first row = 1, last row=-1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @param searchType exact ?  like ? starting like ?
     * @return the number of rows returned
     * @throws DAOException
     */
    //20
    public int countUsingTemplate(ClientBean bean, int startRow, int numRows, int searchType) throws DAOException
    {
        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer sql = new StringBuffer("SELECT COUNT(*) AS MCOUNT FROM client");
        StringBuffer sqlWhere = new StringBuffer("");

        try
        {
            if (this.fillWhere(sqlWhere, bean, SEARCH_EXACT) > 0) {
                sql.append(" WHERE ").append(sqlWhere);
            } else {
                // System.out.println("The bean to look is not initialized... counting all...");
            }
            // System.out.println("countUsingTemplate: " + sql.toString());

            c = this.getConnection();
            ps = c.prepareStatement(sql.toString(),
                                    ResultSet.TYPE_SCROLL_INSENSITIVE,
                                    ResultSet.CONCUR_READ_ONLY);
            this.fillPreparedStatement(ps, bean, searchType);

            return this.countByPreparedStatement(ps);
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            this.getManager().close(ps);
            this.freeConnection(c);
            sql = null;
            sqlWhere = null;
        }
    }

    //


    /**
     * fills the given stringbuffer with the sql where clausis constructed using the bean and the search type
     * @param sqlWhere the stringbuffer that will be filled
     * @param bean the bean to use for creating the where clausis
     * @param searchType exact ?  like ? starting like ?
     * @return the number of clausis returned
     */
    protected int fillWhere(StringBuffer sqlWhere, ClientBean bean, int searchType)
    {
        if (bean == null) {
            return 0;
        }
        int _dirtyCount = 0;
        String sqlEqualsOperation = "=";
        if (searchType != SEARCH_EXACT) {
            sqlEqualsOperation = " like ";
        }
        try
        {
            if (bean.isLastUpdateModified()) {
                _dirtyCount ++;
                if (bean.getLastUpdate() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("last_update IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("last_update = ?");
                }
            }
            if (bean.isActiveYnModified()) {
                _dirtyCount ++;
                if (bean.getActiveYn() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("active_yn IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("active_yn ").append(sqlEqualsOperation).append("?");
                }
            }
            if (bean.isMonthlyBillRateModified()) {
                _dirtyCount ++;
                if (bean.getMonthlyBillRate() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("monthly_bill_rate IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("monthly_bill_rate = ?");
                }
            }
            if (bean.isBillTypeModified()) {
                _dirtyCount ++;
                if (bean.getBillType() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("bill_type IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("bill_type ").append(sqlEqualsOperation).append("?");
                }
            }
            if (bean.isNoteModified()) {
                _dirtyCount ++;
                if (bean.getNote() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("note IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("note ").append(sqlEqualsOperation).append("?");
                }
            }
            if (bean.isClientSinceDtModified()) {
                _dirtyCount ++;
                if (bean.getClientSinceDt() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("client_since_dt IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("client_since_dt = ?");
                }
            }
            if (bean.isEmailModified()) {
                _dirtyCount ++;
                if (bean.getEmail() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("email IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("email ").append(sqlEqualsOperation).append("?");
                }
            }
            if (bean.isFaxModified()) {
                _dirtyCount ++;
                if (bean.getFax() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("fax IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("fax ").append(sqlEqualsOperation).append("?");
                }
            }
            if (bean.isCellPhoneModified()) {
                _dirtyCount ++;
                if (bean.getCellPhone() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("cell_phone IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("cell_phone ").append(sqlEqualsOperation).append("?");
                }
            }
            if (bean.isHomePhoneModified()) {
                _dirtyCount ++;
                if (bean.getHomePhone() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("home_phone IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("home_phone ").append(sqlEqualsOperation).append("?");
                }
            }
            if (bean.isWorkPhoneModified()) {
                _dirtyCount ++;
                if (bean.getWorkPhone() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("work_phone IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("work_phone ").append(sqlEqualsOperation).append("?");
                }
            }
            if (bean.isZipModified()) {
                _dirtyCount ++;
                if (bean.getZip() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("zip IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("zip ").append(sqlEqualsOperation).append("?");
                }
            }
            if (bean.isStateModified()) {
                _dirtyCount ++;
                if (bean.getState() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("state IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("state ").append(sqlEqualsOperation).append("?");
                }
            }
            if (bean.isCityModified()) {
                _dirtyCount ++;
                if (bean.getCity() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("city IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("city ").append(sqlEqualsOperation).append("?");
                }
            }
            if (bean.isAddressModified()) {
                _dirtyCount ++;
                if (bean.getAddress() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("address IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("address ").append(sqlEqualsOperation).append("?");
                }
            }
            if (bean.isLastNameModified()) {
                _dirtyCount ++;
                if (bean.getLastName() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("last_name IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("last_name ").append(sqlEqualsOperation).append("?");
                }
            }
            if (bean.isFirstNameModified()) {
                _dirtyCount ++;
                if (bean.getFirstName() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("first_name IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("first_name ").append(sqlEqualsOperation).append("?");
                }
            }
            if (bean.isClientIdModified()) {
                _dirtyCount ++;
                if (bean.getClientId() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("client_id IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("client_id = ?");
                }
            }
        }
        finally
        {
            sqlEqualsOperation = null;
        }
        return _dirtyCount;
    }

    /**
     * fill the given prepared statement with the bean values and a search type
     * @param ps the preparedStatement that will be filled
     * @param bean the bean to use for creating the where clausis
     * @param searchType exact ?  like ? starting like ?
     * @return the number of clausis returned
     * @throws DAOException
     */
    protected int fillPreparedStatement(PreparedStatement ps, ClientBean bean, int searchType) throws DAOException
    {
        if (bean == null) {
            return 0;
        }
        int _dirtyCount = 0;
        try
        {
            if (bean.isLastUpdateModified()) {
                // System.out.println("Setting for " + _dirtyCount + " [" + bean.getLastUpdate() + "]");
                if (bean.getLastUpdate() == null) { ps.setNull(++_dirtyCount, Types.TIMESTAMP); } else { ps.setTimestamp(++_dirtyCount, new java.sql.Timestamp(bean.getLastUpdate().getTime())); }
            }
            if (bean.isActiveYnModified()) {
                switch (searchType){
                    case SEARCH_EXACT:
                        // System.out.println("Setting for " + _dirtyCount + " [" + bean.getActiveYn() + "]");
                        if (bean.getActiveYn() == null) { ps.setNull(++_dirtyCount, Types.CHAR); } else { ps.setString(++_dirtyCount, bean.getActiveYn()); }
                        break;
                    case SEARCH_LIKE:
                        // System.out.println("Setting for " + _dirtyCount + " [%" + bean.getActiveYn() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getActiveYn() + "%");
                        break;
                    case SEARCH_STARTING_LIKE:
                        // System.out.println("Setting for " + _dirtyCount + " [" + bean.getActiveYn() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getActiveYn());
                        break;
                    case SEARCH_ENDING_LIKE:
                        // System.out.println("Setting for " + _dirtyCount + " [%" + bean.getActiveYn() + "]");
                        if (bean.getActiveYn() + "%" == null) { ps.setNull(++_dirtyCount, Types.CHAR); } else { ps.setString(++_dirtyCount, bean.getActiveYn() + "%"); }
                        break;
                    default:
                        throw new DAOException("Unknown search type " + searchType);
                }
            }
            if (bean.isMonthlyBillRateModified()) {
                // System.out.println("Setting for " + _dirtyCount + " [" + bean.getMonthlyBillRate() + "]");
                if (bean.getMonthlyBillRate() == null) { ps.setNull(++_dirtyCount, Types.DOUBLE); } else { Manager.setDouble(ps, ++_dirtyCount, bean.getMonthlyBillRate()); }
            }
            if (bean.isBillTypeModified()) {
                switch (searchType){
                    case SEARCH_EXACT:
                        // System.out.println("Setting for " + _dirtyCount + " [" + bean.getBillType() + "]");
                        if (bean.getBillType() == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getBillType()); }
                        break;
                    case SEARCH_LIKE:
                        // System.out.println("Setting for " + _dirtyCount + " [%" + bean.getBillType() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getBillType() + "%");
                        break;
                    case SEARCH_STARTING_LIKE:
                        // System.out.println("Setting for " + _dirtyCount + " [" + bean.getBillType() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getBillType());
                        break;
                    case SEARCH_ENDING_LIKE:
                        // System.out.println("Setting for " + _dirtyCount + " [%" + bean.getBillType() + "]");
                        if (bean.getBillType() + "%" == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getBillType() + "%"); }
                        break;
                    default:
                        throw new DAOException("Unknown search type " + searchType);
                }
            }
            if (bean.isNoteModified()) {
                switch (searchType){
                    case SEARCH_EXACT:
                        // System.out.println("Setting for " + _dirtyCount + " [" + bean.getNote() + "]");
                        if (bean.getNote() == null) { ps.setNull(++_dirtyCount, Types.LONGVARCHAR); } else { ps.setString(++_dirtyCount, bean.getNote()); }
                        break;
                    case SEARCH_LIKE:
                        // System.out.println("Setting for " + _dirtyCount + " [%" + bean.getNote() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getNote() + "%");
                        break;
                    case SEARCH_STARTING_LIKE:
                        // System.out.println("Setting for " + _dirtyCount + " [" + bean.getNote() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getNote());
                        break;
                    case SEARCH_ENDING_LIKE:
                        // System.out.println("Setting for " + _dirtyCount + " [%" + bean.getNote() + "]");
                        if (bean.getNote() + "%" == null) { ps.setNull(++_dirtyCount, Types.LONGVARCHAR); } else { ps.setString(++_dirtyCount, bean.getNote() + "%"); }
                        break;
                    default:
                        throw new DAOException("Unknown search type " + searchType);
                }
            }
            if (bean.isClientSinceDtModified()) {
                // System.out.println("Setting for " + _dirtyCount + " [" + bean.getClientSinceDt() + "]");
                if (bean.getClientSinceDt() == null) { ps.setNull(++_dirtyCount, Types.DATE); } else { ps.setDate(++_dirtyCount, new java.sql.Date(bean.getClientSinceDt().getTime())); }
            }
            if (bean.isEmailModified()) {
                switch (searchType){
                    case SEARCH_EXACT:
                        // System.out.println("Setting for " + _dirtyCount + " [" + bean.getEmail() + "]");
                        if (bean.getEmail() == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getEmail()); }
                        break;
                    case SEARCH_LIKE:
                        // System.out.println("Setting for " + _dirtyCount + " [%" + bean.getEmail() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getEmail() + "%");
                        break;
                    case SEARCH_STARTING_LIKE:
                        // System.out.println("Setting for " + _dirtyCount + " [" + bean.getEmail() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getEmail());
                        break;
                    case SEARCH_ENDING_LIKE:
                        // System.out.println("Setting for " + _dirtyCount + " [%" + bean.getEmail() + "]");
                        if (bean.getEmail() + "%" == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getEmail() + "%"); }
                        break;
                    default:
                        throw new DAOException("Unknown search type " + searchType);
                }
            }
            if (bean.isFaxModified()) {
                switch (searchType){
                    case SEARCH_EXACT:
                        // System.out.println("Setting for " + _dirtyCount + " [" + bean.getFax() + "]");
                        if (bean.getFax() == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getFax()); }
                        break;
                    case SEARCH_LIKE:
                        // System.out.println("Setting for " + _dirtyCount + " [%" + bean.getFax() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getFax() + "%");
                        break;
                    case SEARCH_STARTING_LIKE:
                        // System.out.println("Setting for " + _dirtyCount + " [" + bean.getFax() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getFax());
                        break;
                    case SEARCH_ENDING_LIKE:
                        // System.out.println("Setting for " + _dirtyCount + " [%" + bean.getFax() + "]");
                        if (bean.getFax() + "%" == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getFax() + "%"); }
                        break;
                    default:
                        throw new DAOException("Unknown search type " + searchType);
                }
            }
            if (bean.isCellPhoneModified()) {
                switch (searchType){
                    case SEARCH_EXACT:
                        // System.out.println("Setting for " + _dirtyCount + " [" + bean.getCellPhone() + "]");
                        if (bean.getCellPhone() == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getCellPhone()); }
                        break;
                    case SEARCH_LIKE:
                        // System.out.println("Setting for " + _dirtyCount + " [%" + bean.getCellPhone() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getCellPhone() + "%");
                        break;
                    case SEARCH_STARTING_LIKE:
                        // System.out.println("Setting for " + _dirtyCount + " [" + bean.getCellPhone() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getCellPhone());
                        break;
                    case SEARCH_ENDING_LIKE:
                        // System.out.println("Setting for " + _dirtyCount + " [%" + bean.getCellPhone() + "]");
                        if (bean.getCellPhone() + "%" == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getCellPhone() + "%"); }
                        break;
                    default:
                        throw new DAOException("Unknown search type " + searchType);
                }
            }
            if (bean.isHomePhoneModified()) {
                switch (searchType){
                    case SEARCH_EXACT:
                        // System.out.println("Setting for " + _dirtyCount + " [" + bean.getHomePhone() + "]");
                        if (bean.getHomePhone() == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getHomePhone()); }
                        break;
                    case SEARCH_LIKE:
                        // System.out.println("Setting for " + _dirtyCount + " [%" + bean.getHomePhone() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getHomePhone() + "%");
                        break;
                    case SEARCH_STARTING_LIKE:
                        // System.out.println("Setting for " + _dirtyCount + " [" + bean.getHomePhone() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getHomePhone());
                        break;
                    case SEARCH_ENDING_LIKE:
                        // System.out.println("Setting for " + _dirtyCount + " [%" + bean.getHomePhone() + "]");
                        if (bean.getHomePhone() + "%" == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getHomePhone() + "%"); }
                        break;
                    default:
                        throw new DAOException("Unknown search type " + searchType);
                }
            }
            if (bean.isWorkPhoneModified()) {
                switch (searchType){
                    case SEARCH_EXACT:
                        // System.out.println("Setting for " + _dirtyCount + " [" + bean.getWorkPhone() + "]");
                        if (bean.getWorkPhone() == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getWorkPhone()); }
                        break;
                    case SEARCH_LIKE:
                        // System.out.println("Setting for " + _dirtyCount + " [%" + bean.getWorkPhone() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getWorkPhone() + "%");
                        break;
                    case SEARCH_STARTING_LIKE:
                        // System.out.println("Setting for " + _dirtyCount + " [" + bean.getWorkPhone() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getWorkPhone());
                        break;
                    case SEARCH_ENDING_LIKE:
                        // System.out.println("Setting for " + _dirtyCount + " [%" + bean.getWorkPhone() + "]");
                        if (bean.getWorkPhone() + "%" == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getWorkPhone() + "%"); }
                        break;
                    default:
                        throw new DAOException("Unknown search type " + searchType);
                }
            }
            if (bean.isZipModified()) {
                switch (searchType){
                    case SEARCH_EXACT:
                        // System.out.println("Setting for " + _dirtyCount + " [" + bean.getZip() + "]");
                        if (bean.getZip() == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getZip()); }
                        break;
                    case SEARCH_LIKE:
                        // System.out.println("Setting for " + _dirtyCount + " [%" + bean.getZip() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getZip() + "%");
                        break;
                    case SEARCH_STARTING_LIKE:
                        // System.out.println("Setting for " + _dirtyCount + " [" + bean.getZip() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getZip());
                        break;
                    case SEARCH_ENDING_LIKE:
                        // System.out.println("Setting for " + _dirtyCount + " [%" + bean.getZip() + "]");
                        if (bean.getZip() + "%" == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getZip() + "%"); }
                        break;
                    default:
                        throw new DAOException("Unknown search type " + searchType);
                }
            }
            if (bean.isStateModified()) {
                switch (searchType){
                    case SEARCH_EXACT:
                        // System.out.println("Setting for " + _dirtyCount + " [" + bean.getState() + "]");
                        if (bean.getState() == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getState()); }
                        break;
                    case SEARCH_LIKE:
                        // System.out.println("Setting for " + _dirtyCount + " [%" + bean.getState() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getState() + "%");
                        break;
                    case SEARCH_STARTING_LIKE:
                        // System.out.println("Setting for " + _dirtyCount + " [" + bean.getState() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getState());
                        break;
                    case SEARCH_ENDING_LIKE:
                        // System.out.println("Setting for " + _dirtyCount + " [%" + bean.getState() + "]");
                        if (bean.getState() + "%" == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getState() + "%"); }
                        break;
                    default:
                        throw new DAOException("Unknown search type " + searchType);
                }
            }
            if (bean.isCityModified()) {
                switch (searchType){
                    case SEARCH_EXACT:
                        // System.out.println("Setting for " + _dirtyCount + " [" + bean.getCity() + "]");
                        if (bean.getCity() == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getCity()); }
                        break;
                    case SEARCH_LIKE:
                        // System.out.println("Setting for " + _dirtyCount + " [%" + bean.getCity() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getCity() + "%");
                        break;
                    case SEARCH_STARTING_LIKE:
                        // System.out.println("Setting for " + _dirtyCount + " [" + bean.getCity() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getCity());
                        break;
                    case SEARCH_ENDING_LIKE:
                        // System.out.println("Setting for " + _dirtyCount + " [%" + bean.getCity() + "]");
                        if (bean.getCity() + "%" == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getCity() + "%"); }
                        break;
                    default:
                        throw new DAOException("Unknown search type " + searchType);
                }
            }
            if (bean.isAddressModified()) {
                switch (searchType){
                    case SEARCH_EXACT:
                        // System.out.println("Setting for " + _dirtyCount + " [" + bean.getAddress() + "]");
                        if (bean.getAddress() == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getAddress()); }
                        break;
                    case SEARCH_LIKE:
                        // System.out.println("Setting for " + _dirtyCount + " [%" + bean.getAddress() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getAddress() + "%");
                        break;
                    case SEARCH_STARTING_LIKE:
                        // System.out.println("Setting for " + _dirtyCount + " [" + bean.getAddress() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getAddress());
                        break;
                    case SEARCH_ENDING_LIKE:
                        // System.out.println("Setting for " + _dirtyCount + " [%" + bean.getAddress() + "]");
                        if (bean.getAddress() + "%" == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getAddress() + "%"); }
                        break;
                    default:
                        throw new DAOException("Unknown search type " + searchType);
                }
            }
            if (bean.isLastNameModified()) {
                switch (searchType){
                    case SEARCH_EXACT:
                        // System.out.println("Setting for " + _dirtyCount + " [" + bean.getLastName() + "]");
                        if (bean.getLastName() == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getLastName()); }
                        break;
                    case SEARCH_LIKE:
                        // System.out.println("Setting for " + _dirtyCount + " [%" + bean.getLastName() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getLastName() + "%");
                        break;
                    case SEARCH_STARTING_LIKE:
                        // System.out.println("Setting for " + _dirtyCount + " [" + bean.getLastName() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getLastName());
                        break;
                    case SEARCH_ENDING_LIKE:
                        // System.out.println("Setting for " + _dirtyCount + " [%" + bean.getLastName() + "]");
                        if (bean.getLastName() + "%" == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getLastName() + "%"); }
                        break;
                    default:
                        throw new DAOException("Unknown search type " + searchType);
                }
            }
            if (bean.isFirstNameModified()) {
                switch (searchType){
                    case SEARCH_EXACT:
                        // System.out.println("Setting for " + _dirtyCount + " [" + bean.getFirstName() + "]");
                        if (bean.getFirstName() == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getFirstName()); }
                        break;
                    case SEARCH_LIKE:
                        // System.out.println("Setting for " + _dirtyCount + " [%" + bean.getFirstName() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getFirstName() + "%");
                        break;
                    case SEARCH_STARTING_LIKE:
                        // System.out.println("Setting for " + _dirtyCount + " [" + bean.getFirstName() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getFirstName());
                        break;
                    case SEARCH_ENDING_LIKE:
                        // System.out.println("Setting for " + _dirtyCount + " [%" + bean.getFirstName() + "]");
                        if (bean.getFirstName() + "%" == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getFirstName() + "%"); }
                        break;
                    default:
                        throw new DAOException("Unknown search type " + searchType);
                }
            }
            if (bean.isClientIdModified()) {
                // System.out.println("Setting for " + _dirtyCount + " [" + bean.getClientId() + "]");
                if (bean.getClientId() == null) { ps.setNull(++_dirtyCount, Types.INTEGER); } else { Manager.setInteger(ps, ++_dirtyCount, bean.getClientId()); }
            }
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        return _dirtyCount;
    }


    //_____________________________________________________________________
    //
    // DECODE RESULT SET
    //_____________________________________________________________________

    /**
     * decode a resultset in an array of ClientBean objects
     *
     * @param rs the resultset to decode
     * @param fieldList table of the field's associated constants
     * @param startRow the start row to be used (first row = 1, last row = -1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @return the resulting ClientBean table
     * @throws DAOException
     */
    //28
    public ClientBean[] decodeResultSet(ResultSet rs, int[] fieldList, int startRow, int numRows) throws DAOException
    {
        List v = new ArrayList();
        try
        {
            if (rs.absolute(startRow) && numRows!=0)
            {
                int count = 0;
                if(fieldList == null) {
                    do
                    {
                        v.add(decodeRow(rs));
                        count++;
                    } while ( (count<numRows||numRows<0) && rs.next() );
                }
                else {
                    do
                    {
                        v.add(decodeRow(rs, fieldList));
                        count++;
                    } while ( (count<numRows||numRows<0) && rs.next() );
                }
            }
            return (ClientBean[])v.toArray(new ClientBean[v.size()]);
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            if (v != null) { v.clear(); v = null;}
        }
    }

    /**
     * Transforms a ResultSet iterating on the client on a ClientBean bean.
     *
     * @param rs the ResultSet to be transformed
     * @return bean resulting ClientBean bean
     * @throws DAOException
     */
    //29
    public ClientBean decodeRow(ResultSet rs) throws DAOException
    {
        ClientBean bean = this.createClientBean();
        try
        {
            bean.setLastUpdate(rs.getTimestamp(1));
            bean.setActiveYn(rs.getString(2));
            bean.setMonthlyBillRate(Manager.getDouble(rs, 3));
            bean.setBillType(rs.getString(4));
            bean.setNote(rs.getString(5));
            bean.setClientSinceDt(rs.getDate(6));
            bean.setEmail(rs.getString(7));
            bean.setFax(rs.getString(8));
            bean.setCellPhone(rs.getString(9));
            bean.setHomePhone(rs.getString(10));
            bean.setWorkPhone(rs.getString(11));
            bean.setZip(rs.getString(12));
            bean.setState(rs.getString(13));
            bean.setCity(rs.getString(14));
            bean.setAddress(rs.getString(15));
            bean.setLastName(rs.getString(16));
            bean.setFirstName(rs.getString(17));
            bean.setClientId(Manager.getInteger(rs, 18));
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        bean.isNew(false);
        bean.resetIsModified();

        return bean;
    }

    /**
     * Transforms a ResultSet iterating on the client table on a ClientBean bean according to a list of fields.
     *
     * @param rs the ResultSet to be transformed
     * @param fieldList table of the field's associated constants
     * @return bean resulting ClientBean bean
     * @throws DAOException
     */
    //30
    public ClientBean decodeRow(ResultSet rs, int[] fieldList) throws DAOException
    {
        ClientBean bean = this.createClientBean();
        int pos = 0;
        try
        {
            for(int i = 0; i < fieldList.length; i++)
            {
                switch(fieldList[i])
                {
                    case ID_LAST_UPDATE:
                        ++pos;
                        bean.setLastUpdate(rs.getTimestamp(pos));
                        break;
                    case ID_ACTIVE_YN:
                        ++pos;
                        bean.setActiveYn(rs.getString(pos));
                        break;
                    case ID_MONTHLY_BILL_RATE:
                        ++pos;
                        bean.setMonthlyBillRate(Manager.getDouble(rs, pos));
                        break;
                    case ID_BILL_TYPE:
                        ++pos;
                        bean.setBillType(rs.getString(pos));
                        break;
                    case ID_NOTE:
                        ++pos;
                        bean.setNote(rs.getString(pos));
                        break;
                    case ID_CLIENT_SINCE_DT:
                        ++pos;
                        bean.setClientSinceDt(rs.getDate(pos));
                        break;
                    case ID_EMAIL:
                        ++pos;
                        bean.setEmail(rs.getString(pos));
                        break;
                    case ID_FAX:
                        ++pos;
                        bean.setFax(rs.getString(pos));
                        break;
                    case ID_CELL_PHONE:
                        ++pos;
                        bean.setCellPhone(rs.getString(pos));
                        break;
                    case ID_HOME_PHONE:
                        ++pos;
                        bean.setHomePhone(rs.getString(pos));
                        break;
                    case ID_WORK_PHONE:
                        ++pos;
                        bean.setWorkPhone(rs.getString(pos));
                        break;
                    case ID_ZIP:
                        ++pos;
                        bean.setZip(rs.getString(pos));
                        break;
                    case ID_STATE:
                        ++pos;
                        bean.setState(rs.getString(pos));
                        break;
                    case ID_CITY:
                        ++pos;
                        bean.setCity(rs.getString(pos));
                        break;
                    case ID_ADDRESS:
                        ++pos;
                        bean.setAddress(rs.getString(pos));
                        break;
                    case ID_LAST_NAME:
                        ++pos;
                        bean.setLastName(rs.getString(pos));
                        break;
                    case ID_FIRST_NAME:
                        ++pos;
                        bean.setFirstName(rs.getString(pos));
                        break;
                    case ID_CLIENT_ID:
                        ++pos;
                        bean.setClientId(Manager.getInteger(rs, pos));
                        break;
                    default:
                        throw new DAOException("Unknown field id " + fieldList[i]);
                }
            }
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        bean.isNew(false);
        bean.resetIsModified();

        return bean;
    }

    /**
     * Transforms a ResultSet iterating on the client on a ClientBean bean using the names of the columns
     *
     * @param rs the ResultSet to be transformed
     * @return bean resulting ClientBean bean
     * @throws DAOException
     */
    //31
    public ClientBean metaDataDecodeRow(ResultSet rs) throws DAOException
    {
        ClientBean bean = this.createClientBean();
        try
        {
            bean.setLastUpdate(rs.getTimestamp("last_update"));
            bean.setActiveYn(rs.getString("active_yn"));
            bean.setMonthlyBillRate(Manager.getDouble(rs, "monthly_bill_rate"));
            bean.setBillType(rs.getString("bill_type"));
            bean.setNote(rs.getString("note"));
            bean.setClientSinceDt(rs.getDate("client_since_dt"));
            bean.setEmail(rs.getString("email"));
            bean.setFax(rs.getString("fax"));
            bean.setCellPhone(rs.getString("cell_phone"));
            bean.setHomePhone(rs.getString("home_phone"));
            bean.setWorkPhone(rs.getString("work_phone"));
            bean.setZip(rs.getString("zip"));
            bean.setState(rs.getString("state"));
            bean.setCity(rs.getString("city"));
            bean.setAddress(rs.getString("address"));
            bean.setLastName(rs.getString("last_name"));
            bean.setFirstName(rs.getString("first_name"));
            bean.setClientId(Manager.getInteger(rs, "client_id"));
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }

        bean.isNew(false);
        bean.resetIsModified();

        return bean;
    }

    //////////////////////////////////////
    // PREPARED STATEMENT LOADER
    //////////////////////////////////////

    /**
     * Loads all the elements using a prepared statement.
     *
     * @param ps the PreparedStatement to be used
     * @return an array of ClientBean
     * @throws DAOException
     */
    //32
    public ClientBean[] loadByPreparedStatement(PreparedStatement ps) throws DAOException
    {
        return this.loadByPreparedStatement(ps, null);
    }

    /**
     * Loads all the elements using a prepared statement specifying a list of fields to be retrieved.
     *
     * @param ps the PreparedStatement to be used
     * @param fieldList table of the field's associated constants
     * @return an array of ClientBean
     * @throws DAOException
     */
    //33
    public ClientBean[] loadByPreparedStatement(PreparedStatement ps, int[] fieldList) throws DAOException
    {
        ResultSet rs =  null;
		List v =  null;
		try
		{
		    rs =  ps.executeQuery();
		    v = new ArrayList();
			if(fieldList == null) {
				while(rs.next()) {
					v.add(decodeRow(rs));
				}
			}
			else {
				while(rs.next()) {
					v.add(decodeRow(rs, fieldList));
				}
			}

			return (ClientBean[])v.toArray(new ClientBean[0]);
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            if (v != null) { v.clear(); v = null;}
            getManager().close(rs);
        }
    }

    /**
     * Loads all the elements using a prepared statement specifying a list of fields to be retrieved,
     * and specifying the start row and the number of rows.
     *
     * @param ps the PreparedStatement to be used
     * @param startRow the start row to be used (first row = 1, last row = -1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @param fieldList table of the field's associated constants
     * @return an array of ClientBean
     * @throws DAOException
     */
    //34
    public ClientBean[] loadByPreparedStatement(PreparedStatement ps, int[] fieldList, int startRow, int numRows) throws DAOException
    {
        ResultSet rs =  null;
        try
        {
            rs = ps.executeQuery();
            return this.decodeResultSet(rs, fieldList, startRow, numRows);
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            this.getManager().close(rs);
        }
    }

    //_____________________________________________________________________
    //
    // LISTENER
    //_____________________________________________________________________
    private ClientListener listener = null;

    /**
     * Registers a unique ClientListener listener.
     */
    //35
    public void registerListener(ClientListener listener)
    {
        this.listener = listener;
    }

    /**
     * Before the save of the ClientBean bean.
     *
     * @param bean the ClientBean bean to be saved
     */
    //36
    private void beforeInsert(ClientBean bean) throws DAOException
    {
        if (listener != null) {
            listener.beforeInsert(bean);
        }
    }

    /**
     * After the save of the ClientBean bean.
     *
     * @param bean the ClientBean bean to be saved
     */
    //37
    private void afterInsert(ClientBean bean) throws DAOException
    {
        if (listener != null) {
            listener.afterInsert(bean);
        }
    }

    /**
     * Before the update of the ClientBean bean.
     *
     * @param bean the ClientBean bean to be updated
     */
    //38
    private void beforeUpdate(ClientBean bean) throws DAOException
    {
        if (listener != null) {
            listener.beforeUpdate(bean);
        }
    }

    /**
     * After the update of the ClientBean bean.
     *
     * @param bean the ClientBean bean to be updated
     */
    //39
    private void afterUpdate(ClientBean bean) throws DAOException
    {
        if (listener != null) {
            listener.afterUpdate(bean);
        }
    }

    /**
     * Before the delete of the ClientBean bean.
     *
     * @param bean the ClientBean bean to be deleted
     */
    private void beforeDelete(ClientBean bean) throws DAOException
    {
        if (listener != null) {
            listener.beforeDelete(bean);
        }
    }

    /**
     * After the delete of the ClientBean bean.
     *
     * @param bean the ClientBean bean to be deleted
     */
    private void afterDelete(ClientBean bean) throws DAOException
    {
        if (listener != null) {
            listener.afterDelete(bean);
        }
    }

    //_____________________________________________________________________
    //
    // UTILS
    //_____________________________________________________________________

    /**
     * Retrieves the manager object used to get connections.
     *
     * @return the manager used
     */
    //40
    private Manager getManager()
    {
        return Manager.getInstance();
    }

    /**
     * Frees the connection.
     *
     * @param c the connection to release
     */
    //41
    private void freeConnection(Connection c)
    {
        this.getManager().releaseConnection(c); // back to pool
    }

    /**
     * Gets the connection.
     */
    //42
    private Connection getConnection() throws DAOException
    {
        try
        {
            return this.getManager().getConnection();
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
    }
}
