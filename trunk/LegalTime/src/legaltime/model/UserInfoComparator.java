// ______________________________________________________
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: com.mysql.jdbc.Driver
//
// Please help us improve this tool by reporting:
// - problems and suggestions to
//   http://sourceforge.net/tracker/?group_id=54687
// - feedbacks and ideas on
//   http://sourceforge.net/forum/forum.php?forum_id=182208
// ______________________________________________________

package legaltime.model;

import java.util.Comparator;


/**
 * Comparator class is used to sort the UserInfoBean objects.
 * @author sql2java
 */
public class UserInfoComparator implements Comparator
{
    /**
     * Holds the field on which the comparison is performed.
     */
    private int iType;
    /**
     * Value that will contain the information about the order of the sort: normal or reversal.
     */
    private boolean bReverse;

    /**
     * Constructor class for UserInfoComparator.
     * <br>
     * Example:
     * <br>
     * <code>Arrays.sort(pArray, new UserInfoComparator(UserInfoManager.ID_LAST_UPDATE, bReverse));<code>
     *
     * @param iType the field from which you want to sort
     * <br>
     * Possible values are:
     * <ul>
     *   <li>UserInfoManager.ID_LAST_UPDATE
     *   <li>UserInfoManager.ID_DEFUALT_BILL_RATE
     *   <li>UserInfoManager.ID_FIRST_NAME
     *   <li>UserInfoManager.ID_LAST_NAME
     *   <li>UserInfoManager.ID_USER_KEY
     * </ul>
     */
    public UserInfoComparator(int iType)
    {
        this(iType, false);
    }

    /**
     * Constructor class for UserInfoComparator.
     * <br>
     * Example:
     * <br>
     * <code>Arrays.sort(pArray, new UserInfoComparator(UserInfoManager.ID_LAST_UPDATE, bReverse));<code>
     *
     * @param iType the field from which you want to sort.
     * <br>
     * Possible values are:
     * <ul>
     *   <li>UserInfoManager.ID_LAST_UPDATE
     *   <li>UserInfoManager.ID_DEFUALT_BILL_RATE
     *   <li>UserInfoManager.ID_FIRST_NAME
     *   <li>UserInfoManager.ID_LAST_NAME
     *   <li>UserInfoManager.ID_USER_KEY
     * </ul>
     *
     * @param bReverse set this value to true, if you want to reverse the sorting results
     */
    public UserInfoComparator(int iType, boolean bReverse)
    {
        this.iType = iType;
        this.bReverse = bReverse;
    }

    /**
     * Implementation of the compare method.
     */
    public int compare(Object pObj1, Object pObj2)
    {
        UserInfoBean b1 = (UserInfoBean)pObj1;
        UserInfoBean b2 = (UserInfoBean)pObj2;
        int iReturn = 0;
        switch(iType)
        {
            case UserInfoManager.ID_LAST_UPDATE:
                if (b1.getLastUpdate() == null && b2.getLastUpdate() != null) {
                    iReturn = -1;
                } else if (b1.getLastUpdate() == null && b2.getLastUpdate() == null) {
                    iReturn = 0;
                } else if (b1.getLastUpdate() != null && b2.getLastUpdate() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getLastUpdate().compareTo(b2.getLastUpdate());
                }
                break;
            case UserInfoManager.ID_DEFUALT_BILL_RATE:
                if (b1.getDefualtBillRate() == null && b2.getDefualtBillRate() != null) {
                    iReturn = -1;
                } else if (b1.getDefualtBillRate() == null && b2.getDefualtBillRate() == null) {
                    iReturn = 0;
                } else if (b1.getDefualtBillRate() != null && b2.getDefualtBillRate() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getDefualtBillRate().compareTo(b2.getDefualtBillRate());
                }
                break;
            case UserInfoManager.ID_FIRST_NAME:
                if (b1.getFirstName() == null && b2.getFirstName() != null) {
                    iReturn = -1;
                } else if (b1.getFirstName() == null && b2.getFirstName() == null) {
                    iReturn = 0;
                } else if (b1.getFirstName() != null && b2.getFirstName() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getFirstName().compareTo(b2.getFirstName());
                }
                break;
            case UserInfoManager.ID_LAST_NAME:
                if (b1.getLastName() == null && b2.getLastName() != null) {
                    iReturn = -1;
                } else if (b1.getLastName() == null && b2.getLastName() == null) {
                    iReturn = 0;
                } else if (b1.getLastName() != null && b2.getLastName() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getLastName().compareTo(b2.getLastName());
                }
                break;
            case UserInfoManager.ID_USER_KEY:
                if (b1.getUserKey() == null && b2.getUserKey() != null) {
                    iReturn = -1;
                } else if (b1.getUserKey() == null && b2.getUserKey() == null) {
                    iReturn = 0;
                } else if (b1.getUserKey() != null && b2.getUserKey() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getUserKey().compareTo(b2.getUserKey());
                }
                break;
            default:
                throw new IllegalArgumentException("Type passed for the field is not supported");
        }

        return bReverse ? (-1 * iReturn) : iReturn;
    }}
