// ______________________________________________________
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: com.mysql.jdbc.Driver
//
// Please help us improve this tool by reporting:
// - problems and suggestions to
//   http://sourceforge.net/tracker/?group_id=54687
// - feedbacks and ideas on
//   http://sourceforge.net/forum/forum.php?forum_id=182208
// ______________________________________________________

package legaltime.model;

import java.util.Comparator;


/**
 * Comparator class is used to sort the LaborRegisterBean objects.
 * @author sql2java
 */
public class LaborRegisterComparator implements Comparator
{
    /**
     * Holds the field on which the comparison is performed.
     */
    private int iType;
    /**
     * Value that will contain the information about the order of the sort: normal or reversal.
     */
    private boolean bReverse;

    /**
     * Constructor class for LaborRegisterComparator.
     * <br>
     * Example:
     * <br>
     * <code>Arrays.sort(pArray, new LaborRegisterComparator(LaborRegisterManager.ID_LAST_UPDATE, bReverse));<code>
     *
     * @param iType the field from which you want to sort
     * <br>
     * Possible values are:
     * <ul>
     *   <li>LaborRegisterManager.ID_LAST_UPDATE
     *   <li>LaborRegisterManager.ID_USER_KEY
     *   <li>LaborRegisterManager.ID_INVOICE_ID
     *   <li>LaborRegisterManager.ID_DATE
     *   <li>LaborRegisterManager.ID_END_TIME
     *   <li>LaborRegisterManager.ID_START_TIME
     *   <li>LaborRegisterManager.ID_MINUTES
     *   <li>LaborRegisterManager.ID_DESCRIPTION
     *   <li>LaborRegisterManager.ID_CLIENT_ID
     *   <li>LaborRegisterManager.ID_LABOR_REGISTER_ID
     * </ul>
     */
    public LaborRegisterComparator(int iType)
    {
        this(iType, false);
    }

    /**
     * Constructor class for LaborRegisterComparator.
     * <br>
     * Example:
     * <br>
     * <code>Arrays.sort(pArray, new LaborRegisterComparator(LaborRegisterManager.ID_LAST_UPDATE, bReverse));<code>
     *
     * @param iType the field from which you want to sort.
     * <br>
     * Possible values are:
     * <ul>
     *   <li>LaborRegisterManager.ID_LAST_UPDATE
     *   <li>LaborRegisterManager.ID_USER_KEY
     *   <li>LaborRegisterManager.ID_INVOICE_ID
     *   <li>LaborRegisterManager.ID_DATE
     *   <li>LaborRegisterManager.ID_END_TIME
     *   <li>LaborRegisterManager.ID_START_TIME
     *   <li>LaborRegisterManager.ID_MINUTES
     *   <li>LaborRegisterManager.ID_DESCRIPTION
     *   <li>LaborRegisterManager.ID_CLIENT_ID
     *   <li>LaborRegisterManager.ID_LABOR_REGISTER_ID
     * </ul>
     *
     * @param bReverse set this value to true, if you want to reverse the sorting results
     */
    public LaborRegisterComparator(int iType, boolean bReverse)
    {
        this.iType = iType;
        this.bReverse = bReverse;
    }

    /**
     * Implementation of the compare method.
     */
    public int compare(Object pObj1, Object pObj2)
    {
        LaborRegisterBean b1 = (LaborRegisterBean)pObj1;
        LaborRegisterBean b2 = (LaborRegisterBean)pObj2;
        int iReturn = 0;
        switch(iType)
        {
            case LaborRegisterManager.ID_LAST_UPDATE:
                if (b1.getLastUpdate() == null && b2.getLastUpdate() != null) {
                    iReturn = -1;
                } else if (b1.getLastUpdate() == null && b2.getLastUpdate() == null) {
                    iReturn = 0;
                } else if (b1.getLastUpdate() != null && b2.getLastUpdate() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getLastUpdate().compareTo(b2.getLastUpdate());
                }
                break;
            case LaborRegisterManager.ID_USER_KEY:
                if (b1.getUserKey() == null && b2.getUserKey() != null) {
                    iReturn = -1;
                } else if (b1.getUserKey() == null && b2.getUserKey() == null) {
                    iReturn = 0;
                } else if (b1.getUserKey() != null && b2.getUserKey() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getUserKey().compareTo(b2.getUserKey());
                }
                break;
            case LaborRegisterManager.ID_INVOICE_ID:
                if (b1.getInvoiceId() == null && b2.getInvoiceId() != null) {
                    iReturn = -1;
                } else if (b1.getInvoiceId() == null && b2.getInvoiceId() == null) {
                    iReturn = 0;
                } else if (b1.getInvoiceId() != null && b2.getInvoiceId() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getInvoiceId().compareTo(b2.getInvoiceId());
                }
                break;
            case LaborRegisterManager.ID_DATE:
                if (b1.getDate() == null && b2.getDate() != null) {
                    iReturn = -1;
                } else if (b1.getDate() == null && b2.getDate() == null) {
                    iReturn = 0;
                } else if (b1.getDate() != null && b2.getDate() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getDate().compareTo(b2.getDate());
                }
                break;
            case LaborRegisterManager.ID_END_TIME:
                if (b1.getEndTime() == null && b2.getEndTime() != null) {
                    iReturn = -1;
                } else if (b1.getEndTime() == null && b2.getEndTime() == null) {
                    iReturn = 0;
                } else if (b1.getEndTime() != null && b2.getEndTime() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getEndTime().compareTo(b2.getEndTime());
                }
                break;
            case LaborRegisterManager.ID_START_TIME:
                if (b1.getStartTime() == null && b2.getStartTime() != null) {
                    iReturn = -1;
                } else if (b1.getStartTime() == null && b2.getStartTime() == null) {
                    iReturn = 0;
                } else if (b1.getStartTime() != null && b2.getStartTime() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getStartTime().compareTo(b2.getStartTime());
                }
                break;
            case LaborRegisterManager.ID_MINUTES:
                if (b1.getMinutes() == null && b2.getMinutes() != null) {
                    iReturn = -1;
                } else if (b1.getMinutes() == null && b2.getMinutes() == null) {
                    iReturn = 0;
                } else if (b1.getMinutes() != null && b2.getMinutes() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getMinutes().compareTo(b2.getMinutes());
                }
                break;
            case LaborRegisterManager.ID_DESCRIPTION:
                if (b1.getDescription() == null && b2.getDescription() != null) {
                    iReturn = -1;
                } else if (b1.getDescription() == null && b2.getDescription() == null) {
                    iReturn = 0;
                } else if (b1.getDescription() != null && b2.getDescription() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getDescription().compareTo(b2.getDescription());
                }
                break;
            case LaborRegisterManager.ID_CLIENT_ID:
                if (b1.getClientId() == null && b2.getClientId() != null) {
                    iReturn = -1;
                } else if (b1.getClientId() == null && b2.getClientId() == null) {
                    iReturn = 0;
                } else if (b1.getClientId() != null && b2.getClientId() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getClientId().compareTo(b2.getClientId());
                }
                break;
            case LaborRegisterManager.ID_LABOR_REGISTER_ID:
                if (b1.getLaborRegisterId() == null && b2.getLaborRegisterId() != null) {
                    iReturn = -1;
                } else if (b1.getLaborRegisterId() == null && b2.getLaborRegisterId() == null) {
                    iReturn = 0;
                } else if (b1.getLaborRegisterId() != null && b2.getLaborRegisterId() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getLaborRegisterId().compareTo(b2.getLaborRegisterId());
                }
                break;
            default:
                throw new IllegalArgumentException("Type passed for the field is not supported");
        }

        return bReverse ? (-1 * iReturn) : iReturn;
    }}
