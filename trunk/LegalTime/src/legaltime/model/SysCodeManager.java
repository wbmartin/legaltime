// ______________________________________________________
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: com.mysql.jdbc.Driver
//
// Please help us improve this tool by reporting:
// - problems and suggestions to
//   http://sourceforge.net/tracker/?group_id=54687
// - feedbacks and ideas on
//   http://sourceforge.net/forum/forum.php?forum_id=182208
// ______________________________________________________

package legaltime.model;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.Types;
import java.util.List;
import java.util.ArrayList;

import legaltime.model.Manager;
import legaltime.model.exception.DAOException;
import legaltime.model.exception.DataAccessException;
import legaltime.model.exception.ObjectRetrievalException;

/**
 * Handles database calls (save, load, count, etc...) for the sys_code table.
 * @author sql2java
 */
public class SysCodeManager 
{

    /* set =QUERY for loadUsingTemplate */
    public static final int SEARCH_EXACT = 0;
    /* set %QUERY% for loadLikeTemplate */
    public static final int SEARCH_LIKE = 1;
    /* set %QUERY for loadLikeTemplate */
    public static final int SEARCH_STARTING_LIKE = 2;
    /* set QUERY% for loadLikeTemplate */
    public static final int SEARCH_ENDING_LIKE = 3;

    /**
     * Identify the last_update field.
     */
    public static final int ID_LAST_UPDATE = 0;

    /**
     * Identify the system_or_user field.
     */
    public static final int ID_SYSTEM_OR_USER = 1;

    /**
     * Identify the description field.
     */
    public static final int ID_DESCRIPTION = 2;

    /**
     * Identify the code_id field.
     */
    public static final int ID_CODE_ID = 3;

    /**
     * Identify the code_type field.
     */
    public static final int ID_CODE_TYPE = 4;

    /**
     * Identify the sys_code_id field.
     */
    public static final int ID_SYS_CODE_ID = 5;

    /**
     * Contains all the full fields of the sys_code table.
     */
    private static final String[] FULL_FIELD_NAMES =
    {
        "sys_code.last_update"
        ,"sys_code.system_or_user"
        ,"sys_code.description"
        ,"sys_code.code_id"
        ,"sys_code.code_type"
        ,"sys_code.sys_code_id"
    };

    /**
     * Contains all the fields of the sys_code table.
     */
    public static final String[] FIELD_NAMES =
    {
        "last_update"
        ,"system_or_user"
        ,"description"
        ,"code_id"
        ,"code_type"
        ,"sys_code_id"
    };

    /**
     * Field that contains the comma separated fields of the sys_code table.
     */
    public static final String ALL_FULL_FIELDS = "sys_code.last_update"
                            + ",sys_code.system_or_user"
                            + ",sys_code.description"
                            + ",sys_code.code_id"
                            + ",sys_code.code_type"
                            + ",sys_code.sys_code_id";

    /**
     * Field that contains the comma separated fields of the sys_code table.
     */
    public static final String ALL_FIELDS = "last_update"
                            + ",system_or_user"
                            + ",description"
                            + ",code_id"
                            + ",code_type"
                            + ",sys_code_id";

    private static SysCodeManager singleton = new SysCodeManager();

    /**
     * Get the SysCodeManager singleton.
     *
     * @return SysCodeManager
     */
    public static SysCodeManager getInstance()
    {
        return singleton;
    }


    /**
     * Creates a new SysCodeBean instance.
     *
     * @return the new SysCodeBean
     */
    public SysCodeBean createSysCodeBean()
    {
        return new SysCodeBean();
    }

    //////////////////////////////////////
    // PRIMARY KEY METHODS
    //////////////////////////////////////

    /**
     * Loads a SysCodeBean from the sys_code using its key fields.
     *
     * @param sysCodeId Integer - PK# 1
     * @return a unique SysCodeBean
     * @throws DAOException
     */
    //1
    public SysCodeBean loadByPrimaryKey(Integer sysCodeId) throws DAOException
    {
        Connection c = null;
        PreparedStatement ps = null;
        try
        {
            c = this.getConnection();
            StringBuffer sql = new StringBuffer("SELECT " + ALL_FIELDS + " FROM sys_code WHERE sys_code_id=?");
            // System.out.println("loadByPrimaryKey: " + sql);
            ps = c.prepareStatement(sql.toString(),
                                    ResultSet.TYPE_SCROLL_INSENSITIVE,
                                    ResultSet.CONCUR_READ_ONLY);
            if (sysCodeId == null) { ps.setNull(1, Types.INTEGER); } else { Manager.setInteger(ps, 1, sysCodeId); }
            SysCodeBean pReturn[] = this.loadByPreparedStatement(ps);
            if (pReturn.length < 1) {
                throw new ObjectRetrievalException();
            } else {
                return pReturn[0];
            }
        }
        catch(SQLException e)
        {
            throw new ObjectRetrievalException(e);
        }
        finally
        {
            this.getManager().close(ps);
            this.freeConnection(c);
        }
    }

    /**
     * Deletes rows according to its keys.
     *
     * @param sysCodeId Integer - PK# 1
     * @return the number of deleted rows
     * @throws DAOException
     */
    //2
    public int deleteByPrimaryKey(Integer sysCodeId) throws DAOException
    {
        Connection c = null;
        PreparedStatement ps = null;
        try
        {
            c = this.getConnection();
            StringBuffer sql = new StringBuffer("DELETE FROM sys_code WHERE sys_code_id=?");
            // System.out.println("deleteByPrimaryKey: " + sql);
            ps = c.prepareStatement(sql.toString(),
                                    ResultSet.TYPE_SCROLL_INSENSITIVE,
                                    ResultSet.CONCUR_READ_ONLY);
            if (sysCodeId == null) { ps.setNull(1, Types.INTEGER); } else { Manager.setInteger(ps, 1, sysCodeId); }
            return ps.executeUpdate();
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            this.getManager().close(ps);
            this.freeConnection(c);
        }
    }



    //////////////////////////////////////
    // LOAD ALL
    //////////////////////////////////////

    /**
     * Loads all the rows from sys_code.
     *
     * @return an array of SysCodeManager bean
     * @throws DAOException
     */
    //5
    public SysCodeBean[] loadAll() throws DAOException
    {
        return this.loadUsingTemplate(null);
    }

    /**
     * Loads all the rows from sys_code.
     *
     * @param orderBy orders the beans
     * @return an array of SysCodeManager bean
     * @throws DAOException
     */
    //5
    public SysCodeBean[] loadAll(String orderBy) throws DAOException
    {
        return this.loadUsingTemplate(null, orderBy);
    }




    /**
     * Loads the given number of rows from sys_code, given the start row.
     *
     * @param startRow the start row to be used (first row = 1, last row = -1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @return an array of SysCodeManager bean
     * @throws DAOException
     */
    //6
    public SysCodeBean[] loadAll(int startRow, int numRows) throws DAOException
    {
        return this.loadUsingTemplate(null, startRow, numRows);
    }

    //////////////////////////////////////
    // SQL 'WHERE' METHOD
    //////////////////////////////////////
    /**
     * Retrieves an array of SysCodeBean given a sql 'where' clause.
     *
     * @param where the sql 'where' clause
     * @return the resulting SysCodeBean table
     * @throws DAOException
     */
    //7
    public SysCodeBean[] loadByWhere(String where) throws DAOException
    {
        return this.loadByWhere(where, "", null);
    }
    public SysCodeBean[] loadByWhere(String where, String orderBy) throws DAOException
    {
        return this.loadByWhere(where, orderBy, null);
    }

    /**
     * Retrieves an array of SysCodeBean given a sql where clause, and a list of fields.
     * It is up to you to pass the 'WHERE' in your where clausis.
     *
     * @param where the sql 'WHERE' clause
     * @param fieldList array of field's ID
     * @return the resulting SysCodeBean table
     * @throws DAOException
     */
    //8
    public SysCodeBean[] loadByWhere(String where, String orderBy, int[] fieldList) throws DAOException
    {
        return this.loadByWhere(where, orderBy, fieldList, 1, -1);
    }

    /**
     * Retrieves an array of SysCodeBean given a sql where clause and a list of fields, and startRow and numRows.
     * It is up to you to pass the 'WHERE' in your where clausis.
     *
     * @param where the sql 'where' clause
     * @param startRow the start row to be used (first row = 1, last row = -1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @param fieldList table of the field's associated constants
     * @return the resulting SysCodeBean table
     * @throws DAOException
     */
    //9
    public SysCodeBean[] loadByWhere(String where, String orderBy, int[] fieldList, int startRow, int numRows) throws DAOException
    {
        StringBuffer sql = new StringBuffer(128);
        if(fieldList == null) {
            sql.append("SELECT ").append(ALL_FIELDS).append(" FROM sys_code ").append(where);
        } else
        {
            sql.append("SELECT ");
            for(int i = 0; i < fieldList.length; i++)
            {
                if(i != 0) {
                    sql.append(",");
                }
                sql.append(FULL_FIELD_NAMES[fieldList[i]]);
            }
            sql.append(" FROM sys_code ");
            sql.append(where);
	    sql.append(" " + orderBy);
        }
        Connection c = null;
        Statement st = null;
        ResultSet rs =  null;
        // System.out.println("loadByWhere: " + sql);
        try
        {
            c = this.getConnection();
            st = c.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            rs = st.executeQuery(sql.toString());
            return this.decodeResultSet(rs, fieldList, startRow, numRows);
        }
        catch(SQLException e)
        {
            throw new ObjectRetrievalException(e);
        }
        finally
        {
            sql = null;
            this.getManager().close(st, rs);
            this.freeConnection(c);
        }
    }


    /**
     * Deletes all rows from sys_code table.
     * @return the number of deleted rows.
     * @throws DAOException
     */
    //10
    public int deleteAll() throws DAOException
    {
        return this.deleteByWhere("");
    }


    /**
     * Deletes rows from the sys_code table using a 'where' clause.
     * It is up to you to pass the 'WHERE' in your where clausis.
     * <br>Attention, if 'WHERE' is omitted it will delete all records.
     *
     * @param where the sql 'where' clause
     * @return the number of deleted rows
     * @throws DAOException
     */
    //11
    public int deleteByWhere(String where) throws DAOException
    {
        Connection c = null;
        PreparedStatement ps = null;

        try
        {
            c = this.getConnection();
            StringBuffer sql = new StringBuffer("DELETE FROM sys_code " + where);
            // System.out.println("deleteByWhere: " + sql);
            ps = c.prepareStatement(sql.toString());
            return ps.executeUpdate();
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            this.getManager().close(ps);
            this.freeConnection(c);
        }
    }

    //_____________________________________________________________________
    //
    // SAVE
    //_____________________________________________________________________
    /**
     * Saves the SysCodeBean bean into the database.
     *
     * @param bean the SysCodeBean bean to be saved
     * @return the inserted or updated bean
     * @throws DAOException
     */
    //12
    public SysCodeBean save(SysCodeBean bean) throws DAOException
    {
        if (bean.isNew()) {
            return this.insert(bean);
        } else {
            return this.update(bean);
        }
    }

    /**
     * Insert the SysCodeBean bean into the database.
     *
     * @param bean the SysCodeBean bean to be saved
     * @return the inserted bean
     * @throws DAOException
     */
    //13
    public SysCodeBean insert(SysCodeBean bean) throws DAOException
    {
        // mini checks
        if (!bean.isModified()) {
            return bean; // should not we log something ?
        }
        if (!bean.isNew()){
            return this.update(bean);
        }

        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer sql = null;

        try
        {
            c = this.getConnection();
            this.beforeInsert(bean); // listener callback
            int _dirtyCount = 0;
            sql = new StringBuffer("INSERT into sys_code (");

            if (bean.isLastUpdateModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("last_update");
                _dirtyCount++;
            }

            if (bean.isSystemOrUserModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("system_or_user");
                _dirtyCount++;
            }

            if (bean.isDescriptionModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("description");
                _dirtyCount++;
            }

            if (bean.isCodeIdModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("code_id");
                _dirtyCount++;
            }

            if (bean.isCodeTypeModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("code_type");
                _dirtyCount++;
            }

            if (bean.isSysCodeIdModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("sys_code_id");
                _dirtyCount++;
            }

            sql.append(") values (");
            if(_dirtyCount > 0) {
                sql.append("?");
                for(int i = 1; i < _dirtyCount; i++) {
                    sql.append(",?");
                }
            }
            sql.append(")");


            // System.out.println("insert : " + sql.toString());

            ps = c.prepareStatement(sql.toString(), ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);

            this.fillPreparedStatement(ps, bean, SEARCH_EXACT);

            ps.executeUpdate();

            if (!bean.isSysCodeIdModified())
            {
                PreparedStatement ps2 = null;
                ResultSet rs = null;
                try {
                    ps2 = c.prepareStatement("SELECT last_insert_id()");
                    rs = ps2.executeQuery();
                    if(rs.next()) {
                        bean.setSysCodeId(Manager.getInteger(rs, 1));
                    } else {
                        this.getManager().log("ATTENTION: Could not retrieve generated key!");
                    }
                } finally {
                    this.getManager().close(ps2, rs);
                }
            }

            bean.isNew(false);
            bean.resetIsModified();
            this.afterInsert(bean); // listener callback
            return bean;
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            sql = null;
            this.getManager().close(ps);
            this.freeConnection(c);
        }
    }

    /**
     * Update the SysCodeBean bean record in the database according to the changes.
     *
     * @param bean the SysCodeBean bean to be updated
     * @return the updated bean
     * @throws DAOException
     */
    //14
    public SysCodeBean update(SysCodeBean bean) throws DAOException
    {
        // mini checks
        if (!bean.isModified()) {
            return bean; // should not we log something ?
        }
        if (bean.isNew()){
            return this.insert(bean);
        }

        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer sql = null;

        try
        {
            c = this.getConnection();

            this.beforeUpdate(bean); // listener callback
            sql = new StringBuffer("UPDATE sys_code SET ");
            boolean useComma=false;

            if (bean.isLastUpdateModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("last_update=?");
            }

            if (bean.isSystemOrUserModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("system_or_user=?");
            }

            if (bean.isDescriptionModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("description=?");
            }

            if (bean.isCodeIdModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("code_id=?");
            }

            if (bean.isCodeTypeModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("code_type=?");
            }

            if (bean.isSysCodeIdModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("sys_code_id=?");
            }
            sql.append(" WHERE ");
            sql.append("sys_code_id=?");
            // System.out.println("update : " + sql.toString());
            ps = c.prepareStatement(sql.toString(),
                                    ResultSet.TYPE_SCROLL_INSENSITIVE,
                                    ResultSet.CONCUR_READ_ONLY);

            int _dirtyCount = this.fillPreparedStatement(ps, bean, SEARCH_EXACT);

            if (_dirtyCount == 0) {
                // System.out.println("The bean to look is not initialized... do not update.");
                return bean;
            }

            if (bean.getSysCodeId() == null) { ps.setNull(++_dirtyCount, Types.INTEGER); } else { Manager.setInteger(ps, ++_dirtyCount, bean.getSysCodeId()); }
            ps.executeUpdate();
            bean.resetIsModified();
            this.afterUpdate(bean); // listener callback

            return bean;
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            sql = null;
            this.getManager().close(ps);
            this.freeConnection(c);
        }
    }

    /**
     * Saves an array of SysCodeBean beans into the database.
     *
     * @param beans the SysCodeBean bean table to be saved
     * @return the saved SysCodeBean array.
     * @throws DAOException
     */
    //15
    public SysCodeBean[] save(SysCodeBean[] beans) throws DAOException
    {
        for (int iIndex = 0; iIndex < beans.length; iIndex ++)
        {
            this.save(beans[iIndex]);
        }
        return beans;
    }

    /**
     * Insert an array of SysCodeBean beans into the database.
     *
     * @param beans the SysCodeBean bean table to be inserted
     * @return the saved SysCodeBean array.
     * @throws DAOException
     */
    //16
    public SysCodeBean[] insert(SysCodeBean[] beans) throws DAOException
    {
        return this.save(beans);
    }

    /**
     * Updates an array of SysCodeBean beans into the database.
     *
     * @param beans the SysCodeBean bean table to be inserted
     * @return the saved SysCodeBean array.
     * @throws DAOException
     */
    //17
    public SysCodeBean[] update(SysCodeBean[] beans) throws DAOException
    {
        return this.save(beans);
    }



    //_____________________________________________________________________
    //
    // USING TEMPLATE
    //_____________________________________________________________________

 /**
     * Loads a unique SysCodeBean bean from a template one giving a c
     *
     * @param bean the SysCodeBean bean to look for
     * @return the bean matching the template
     * @throws DAOException
     */
    //18
    public SysCodeBean loadUniqueUsingTemplate(SysCodeBean bean) throws DAOException
    {
	return loadUniqueUsingTemplate(bean, "");

    }
    /**
     * Loads a unique SysCodeBean bean from a template one giving a c
     *
     * @param bean the SysCodeBean bean to look for
     * @param orderBy the order by clause for the list
     * @return the bean matching the template
     * @throws DAOException
     */
    //18
    public SysCodeBean loadUniqueUsingTemplate(SysCodeBean bean, String orderBy) throws DAOException
    {
         SysCodeBean[] beans = this.loadUsingTemplate(bean,orderBy);
         if (beans.length == 0) {
             return null;
         }
         if (beans.length > 1) {
             throw new ObjectRetrievalException("More than one element !!");
         }
         return beans[0];
     }


     /**
     * Loads an array of SysCodeBean from a template one.
     *
     * @param bean the SysCodeBean template to look for
     * @return all the SysCodeBean matching the template
     * @throws DAOException
     */
    //19
    public SysCodeBean[] loadUsingTemplate(SysCodeBean bean) throws DAOException
    {
        return this.loadUsingTemplate(bean, 1, -1, "");
    }

    /**
     * Loads an array of SysCodeBean from a template one.
     *
     * @param bean the SysCodeBean template to look for
     * @param orderBy the orderby clause for sql
     * @return all the SysCodeBean matching the template
     * @throws DAOException
     */
    //19
    public SysCodeBean[] loadUsingTemplate(SysCodeBean bean, String orderBy) throws DAOException
    {
        return this.loadUsingTemplate(bean, 1, -1, orderBy);
    }


     /**
     * Loads an array of SysCodeBean from a template one, given the start row and number of rows.
     *
     * @param bean the SysCodeBean template to look for
     * @param startRow the start row to be used (first row = 1, last row=-1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @param orderBy SQL order by Clause
     * @return all the SysCodeBean matching the template
     * @throws DAOException
     */
    //20
    public SysCodeBean[] loadUsingTemplate(SysCodeBean bean, int startRow, int numRows, String orderBy) throws DAOException
    {
        return this.loadUsingTemplate(bean, startRow, numRows, SEARCH_EXACT, orderBy);
    }


    /**
     * Loads an array of SysCodeBean from a template one, given the start row and number of rows.
     *
     * @param bean the SysCodeBean template to look for
     * @param startRow the start row to be used (first row = 1, last row=-1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @return all the SysCodeBean matching the template
     * @throws DAOException
     */
    //20
    public SysCodeBean[] loadUsingTemplate(SysCodeBean bean, int startRow, int numRows) throws DAOException
    {
        return this.loadUsingTemplate(bean, startRow, numRows, SEARCH_EXACT,"");
    }

    /**
     * Loads an array of SysCodeBean from a template one, given the start row and number of rows.
     *
     * @param bean the SysCodeBean template to look for
     * @param startRow the start row to be used (first row = 1, last row=-1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @param searchType exact ?  like ? starting like ?
     * @param orderBy SQL orderBy Clause
     * @return all the SysCodeBean matching the template
     * @throws DAOException
     */
    //20
    public SysCodeBean[] loadUsingTemplate(SysCodeBean bean, int startRow, int numRows, int searchType, String orderBy) throws DAOException
    {
        // System.out.println("loadUsingTemplate startRow:" + startRow + ", numRows:" + numRows + ", searchType:" + searchType);
        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer sql = new StringBuffer(128);
        sql.append("SELECT ").append(ALL_FIELDS).append(" FROM sys_code ");
        StringBuffer sqlWhere = new StringBuffer("");

        try
        {
            if (this.fillWhere(sqlWhere, bean, searchType) > 0) {
                sql.append(" WHERE ").append(sqlWhere);
            } else {
               // System.out.println("The bean to look is not initialized... loading all");
            }
            // System.out.println("loadUsingTemplate: " + sql.toString());
	    sql.append(" " + orderBy);

            c = this.getConnection();
            int scrollType = ResultSet.TYPE_SCROLL_INSENSITIVE;
            if (startRow != 1) {
                scrollType = ResultSet.TYPE_SCROLL_SENSITIVE;
            }
            ps = c.prepareStatement(sql.toString(),
                                    scrollType,
                                    ResultSet.CONCUR_READ_ONLY);
            this.fillPreparedStatement(ps, bean, searchType);

            ps.executeQuery();
            return this.loadByPreparedStatement(ps, null, startRow, numRows);
        }
        catch(SQLException e)
        {
            throw new ObjectRetrievalException(e);
        }
        finally
        {
            this.getManager().close(ps);
            this.freeConnection(c);
            sql = null;
            sqlWhere = null;
        }
    }

    /**
     * Deletes rows using a SysCodeBean template.
     *
     * @param bean the SysCodeBean object(s) to be deleted
     * @return the number of deleted objects
     * @throws DAOException
     */
    //21
    public int deleteUsingTemplate(SysCodeBean bean) throws DAOException
    {
        if (bean.isSysCodeIdInitialized()) {
            return this.deleteByPrimaryKey(bean.getSysCodeId());
        }
        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer sql = new StringBuffer("DELETE FROM sys_code ");
        StringBuffer sqlWhere = new StringBuffer("");

        try
        {
            this.beforeDelete(bean); // listener callback
            if (this.fillWhere(sqlWhere, bean, SEARCH_EXACT) > 0) {
                sql.append(" WHERE ").append(sqlWhere);
            } else {
               // System.out.println("The bean to look is not initialized... deleting all");
            }
            // System.out.println("deleteUsingTemplate: " + sql.toString());

            c = this.getConnection();
            ps = c.prepareStatement(sql.toString(),
                                    ResultSet.TYPE_SCROLL_INSENSITIVE,
                                    ResultSet.CONCUR_READ_ONLY);
            this.fillPreparedStatement(ps, bean, SEARCH_EXACT);

            int _rows = ps.executeUpdate();
            this.afterDelete(bean); // listener callback
            return _rows;
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            this.getManager().close(ps);
            this.freeConnection(c);
            sql = null;
            sqlWhere = null;
        }
    }



    //_____________________________________________________________________
    //
    // COUNT
    //_____________________________________________________________________

    /**
     * Retrieves the number of rows of the table sys_code.
     *
     * @return the number of rows returned
     * @throws DAOException
     */
    //24
    public int countAll() throws DAOException
    {
        return this.countWhere("");
    }

    /**
     * Retrieves the number of rows of the table sys_code with a 'where' clause.
     * It is up to you to pass the 'WHERE' in your where clausis.
     *
     * @param where the restriction clause
     * @return the number of rows returned
     * @throws DAOException
     */
    //25
    public int countWhere(String where) throws DAOException
    {
        String sql = "SELECT COUNT(*) AS MCOUNT FROM sys_code " + where;
        // System.out.println("countWhere: " + sql);
        Connection c = null;
        Statement st = null;
        ResultSet rs =  null;
        try
        {
            int iReturn = -1;
            c = this.getConnection();
            st = c.createStatement();
            rs =  st.executeQuery(sql);
            if (rs.next())
            {
                iReturn = rs.getInt("MCOUNT");
            }
            if (iReturn != -1) {
                return iReturn;
            }
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            this.getManager().close(st, rs);
            this.freeConnection(c);
            sql = null;
        }
        throw new DataAccessException("Error in countWhere where=[" + where + "]");
    }

    /**
     * Retrieves the number of rows of the table sys_code with a prepared statement.
     *
     * @param ps the PreparedStatement to be used
     * @return the number of rows returned
     * @throws DAOException
     */
    //26
    private int countByPreparedStatement(PreparedStatement ps) throws DAOException
    {
        ResultSet rs =  null;
        try
        {
            int iReturn = -1;
            rs = ps.executeQuery();
            if (rs.next()) {
                iReturn = rs.getInt("MCOUNT");
            }
            if (iReturn != -1) {
                return iReturn;
            }
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            this.getManager().close(rs);
        }
       throw new DataAccessException("Error in countByPreparedStatement");
    }

    /**
     * count the number of elements of a specific SysCodeBean bean
     *
     * @param bean the SysCodeBean bean to look for ant count
     * @return the number of rows returned
     * @throws DAOException
     */
    //27
    public int countUsingTemplate(SysCodeBean bean) throws DAOException
    {
        return this.countUsingTemplate(bean, -1, -1);
    }

    /**
     * count the number of elements of a specific SysCodeBean bean , given the start row and number of rows.
     *
     * @param bean the SysCodeBean template to look for and count
     * @param startRow the start row to be used (first row = 1, last row=-1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @return the number of rows returned
     * @throws DAOException
     */
    //20
    public int countUsingTemplate(SysCodeBean bean, int startRow, int numRows) throws DAOException
    {
        return this.countUsingTemplate(bean, startRow, numRows, SEARCH_EXACT);
    }

    /**
     * count the number of elements of a specific SysCodeBean bean given the start row and number of rows and the search type
     *
     * @param bean the SysCodeBean template to look for
     * @param startRow the start row to be used (first row = 1, last row=-1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @param searchType exact ?  like ? starting like ?
     * @return the number of rows returned
     * @throws DAOException
     */
    //20
    public int countUsingTemplate(SysCodeBean bean, int startRow, int numRows, int searchType) throws DAOException
    {
        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer sql = new StringBuffer("SELECT COUNT(*) AS MCOUNT FROM sys_code");
        StringBuffer sqlWhere = new StringBuffer("");

        try
        {
            if (this.fillWhere(sqlWhere, bean, SEARCH_EXACT) > 0) {
                sql.append(" WHERE ").append(sqlWhere);
            } else {
                // System.out.println("The bean to look is not initialized... counting all...");
            }
            // System.out.println("countUsingTemplate: " + sql.toString());

            c = this.getConnection();
            ps = c.prepareStatement(sql.toString(),
                                    ResultSet.TYPE_SCROLL_INSENSITIVE,
                                    ResultSet.CONCUR_READ_ONLY);
            this.fillPreparedStatement(ps, bean, searchType);

            return this.countByPreparedStatement(ps);
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            this.getManager().close(ps);
            this.freeConnection(c);
            sql = null;
            sqlWhere = null;
        }
    }

    //


    /**
     * fills the given stringbuffer with the sql where clausis constructed using the bean and the search type
     * @param sqlWhere the stringbuffer that will be filled
     * @param bean the bean to use for creating the where clausis
     * @param searchType exact ?  like ? starting like ?
     * @return the number of clausis returned
     */
    protected int fillWhere(StringBuffer sqlWhere, SysCodeBean bean, int searchType)
    {
        if (bean == null) {
            return 0;
        }
        int _dirtyCount = 0;
        String sqlEqualsOperation = "=";
        if (searchType != SEARCH_EXACT) {
            sqlEqualsOperation = " like ";
        }
        try
        {
            if (bean.isLastUpdateModified()) {
                _dirtyCount ++;
                if (bean.getLastUpdate() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("last_update IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("last_update = ?");
                }
            }
            if (bean.isSystemOrUserModified()) {
                _dirtyCount ++;
                if (bean.getSystemOrUser() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("system_or_user IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("system_or_user ").append(sqlEqualsOperation).append("?");
                }
            }
            if (bean.isDescriptionModified()) {
                _dirtyCount ++;
                if (bean.getDescription() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("description IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("description ").append(sqlEqualsOperation).append("?");
                }
            }
            if (bean.isCodeIdModified()) {
                _dirtyCount ++;
                if (bean.getCodeId() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("code_id IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("code_id ").append(sqlEqualsOperation).append("?");
                }
            }
            if (bean.isCodeTypeModified()) {
                _dirtyCount ++;
                if (bean.getCodeType() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("code_type IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("code_type ").append(sqlEqualsOperation).append("?");
                }
            }
            if (bean.isSysCodeIdModified()) {
                _dirtyCount ++;
                if (bean.getSysCodeId() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("sys_code_id IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("sys_code_id = ?");
                }
            }
        }
        finally
        {
            sqlEqualsOperation = null;
        }
        return _dirtyCount;
    }

    /**
     * fill the given prepared statement with the bean values and a search type
     * @param ps the preparedStatement that will be filled
     * @param bean the bean to use for creating the where clausis
     * @param searchType exact ?  like ? starting like ?
     * @return the number of clausis returned
     * @throws DAOException
     */
    protected int fillPreparedStatement(PreparedStatement ps, SysCodeBean bean, int searchType) throws DAOException
    {
        if (bean == null) {
            return 0;
        }
        int _dirtyCount = 0;
        try
        {
            if (bean.isLastUpdateModified()) {
                // System.out.println("Setting for " + _dirtyCount + " [" + bean.getLastUpdate() + "]");
                if (bean.getLastUpdate() == null) { ps.setNull(++_dirtyCount, Types.TIMESTAMP); } else { ps.setTimestamp(++_dirtyCount, new java.sql.Timestamp(bean.getLastUpdate().getTime())); }
            }
            if (bean.isSystemOrUserModified()) {
                switch (searchType){
                    case SEARCH_EXACT:
                        // System.out.println("Setting for " + _dirtyCount + " [" + bean.getSystemOrUser() + "]");
                        if (bean.getSystemOrUser() == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getSystemOrUser()); }
                        break;
                    case SEARCH_LIKE:
                        // System.out.println("Setting for " + _dirtyCount + " [%" + bean.getSystemOrUser() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getSystemOrUser() + "%");
                        break;
                    case SEARCH_STARTING_LIKE:
                        // System.out.println("Setting for " + _dirtyCount + " [" + bean.getSystemOrUser() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getSystemOrUser());
                        break;
                    case SEARCH_ENDING_LIKE:
                        // System.out.println("Setting for " + _dirtyCount + " [%" + bean.getSystemOrUser() + "]");
                        if (bean.getSystemOrUser() + "%" == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getSystemOrUser() + "%"); }
                        break;
                    default:
                        throw new DAOException("Unknown search type " + searchType);
                }
            }
            if (bean.isDescriptionModified()) {
                switch (searchType){
                    case SEARCH_EXACT:
                        // System.out.println("Setting for " + _dirtyCount + " [" + bean.getDescription() + "]");
                        if (bean.getDescription() == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getDescription()); }
                        break;
                    case SEARCH_LIKE:
                        // System.out.println("Setting for " + _dirtyCount + " [%" + bean.getDescription() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getDescription() + "%");
                        break;
                    case SEARCH_STARTING_LIKE:
                        // System.out.println("Setting for " + _dirtyCount + " [" + bean.getDescription() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getDescription());
                        break;
                    case SEARCH_ENDING_LIKE:
                        // System.out.println("Setting for " + _dirtyCount + " [%" + bean.getDescription() + "]");
                        if (bean.getDescription() + "%" == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getDescription() + "%"); }
                        break;
                    default:
                        throw new DAOException("Unknown search type " + searchType);
                }
            }
            if (bean.isCodeIdModified()) {
                switch (searchType){
                    case SEARCH_EXACT:
                        // System.out.println("Setting for " + _dirtyCount + " [" + bean.getCodeId() + "]");
                        if (bean.getCodeId() == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getCodeId()); }
                        break;
                    case SEARCH_LIKE:
                        // System.out.println("Setting for " + _dirtyCount + " [%" + bean.getCodeId() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getCodeId() + "%");
                        break;
                    case SEARCH_STARTING_LIKE:
                        // System.out.println("Setting for " + _dirtyCount + " [" + bean.getCodeId() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getCodeId());
                        break;
                    case SEARCH_ENDING_LIKE:
                        // System.out.println("Setting for " + _dirtyCount + " [%" + bean.getCodeId() + "]");
                        if (bean.getCodeId() + "%" == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getCodeId() + "%"); }
                        break;
                    default:
                        throw new DAOException("Unknown search type " + searchType);
                }
            }
            if (bean.isCodeTypeModified()) {
                switch (searchType){
                    case SEARCH_EXACT:
                        // System.out.println("Setting for " + _dirtyCount + " [" + bean.getCodeType() + "]");
                        if (bean.getCodeType() == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getCodeType()); }
                        break;
                    case SEARCH_LIKE:
                        // System.out.println("Setting for " + _dirtyCount + " [%" + bean.getCodeType() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getCodeType() + "%");
                        break;
                    case SEARCH_STARTING_LIKE:
                        // System.out.println("Setting for " + _dirtyCount + " [" + bean.getCodeType() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getCodeType());
                        break;
                    case SEARCH_ENDING_LIKE:
                        // System.out.println("Setting for " + _dirtyCount + " [%" + bean.getCodeType() + "]");
                        if (bean.getCodeType() + "%" == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getCodeType() + "%"); }
                        break;
                    default:
                        throw new DAOException("Unknown search type " + searchType);
                }
            }
            if (bean.isSysCodeIdModified()) {
                // System.out.println("Setting for " + _dirtyCount + " [" + bean.getSysCodeId() + "]");
                if (bean.getSysCodeId() == null) { ps.setNull(++_dirtyCount, Types.INTEGER); } else { Manager.setInteger(ps, ++_dirtyCount, bean.getSysCodeId()); }
            }
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        return _dirtyCount;
    }


    //_____________________________________________________________________
    //
    // DECODE RESULT SET
    //_____________________________________________________________________

    /**
     * decode a resultset in an array of SysCodeBean objects
     *
     * @param rs the resultset to decode
     * @param fieldList table of the field's associated constants
     * @param startRow the start row to be used (first row = 1, last row = -1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @return the resulting SysCodeBean table
     * @throws DAOException
     */
    //28
    public SysCodeBean[] decodeResultSet(ResultSet rs, int[] fieldList, int startRow, int numRows) throws DAOException
    {
        List v = new ArrayList();
        try
        {
            if (rs.absolute(startRow) && numRows!=0)
            {
                int count = 0;
                if(fieldList == null) {
                    do
                    {
                        v.add(decodeRow(rs));
                        count++;
                    } while ( (count<numRows||numRows<0) && rs.next() );
                }
                else {
                    do
                    {
                        v.add(decodeRow(rs, fieldList));
                        count++;
                    } while ( (count<numRows||numRows<0) && rs.next() );
                }
            }
            return (SysCodeBean[])v.toArray(new SysCodeBean[v.size()]);
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            if (v != null) { v.clear(); v = null;}
        }
    }

    /**
     * Transforms a ResultSet iterating on the sys_code on a SysCodeBean bean.
     *
     * @param rs the ResultSet to be transformed
     * @return bean resulting SysCodeBean bean
     * @throws DAOException
     */
    //29
    public SysCodeBean decodeRow(ResultSet rs) throws DAOException
    {
        SysCodeBean bean = this.createSysCodeBean();
        try
        {
            bean.setLastUpdate(rs.getTimestamp(1));
            bean.setSystemOrUser(rs.getString(2));
            bean.setDescription(rs.getString(3));
            bean.setCodeId(rs.getString(4));
            bean.setCodeType(rs.getString(5));
            bean.setSysCodeId(Manager.getInteger(rs, 6));
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        bean.isNew(false);
        bean.resetIsModified();

        return bean;
    }

    /**
     * Transforms a ResultSet iterating on the sys_code table on a SysCodeBean bean according to a list of fields.
     *
     * @param rs the ResultSet to be transformed
     * @param fieldList table of the field's associated constants
     * @return bean resulting SysCodeBean bean
     * @throws DAOException
     */
    //30
    public SysCodeBean decodeRow(ResultSet rs, int[] fieldList) throws DAOException
    {
        SysCodeBean bean = this.createSysCodeBean();
        int pos = 0;
        try
        {
            for(int i = 0; i < fieldList.length; i++)
            {
                switch(fieldList[i])
                {
                    case ID_LAST_UPDATE:
                        ++pos;
                        bean.setLastUpdate(rs.getTimestamp(pos));
                        break;
                    case ID_SYSTEM_OR_USER:
                        ++pos;
                        bean.setSystemOrUser(rs.getString(pos));
                        break;
                    case ID_DESCRIPTION:
                        ++pos;
                        bean.setDescription(rs.getString(pos));
                        break;
                    case ID_CODE_ID:
                        ++pos;
                        bean.setCodeId(rs.getString(pos));
                        break;
                    case ID_CODE_TYPE:
                        ++pos;
                        bean.setCodeType(rs.getString(pos));
                        break;
                    case ID_SYS_CODE_ID:
                        ++pos;
                        bean.setSysCodeId(Manager.getInteger(rs, pos));
                        break;
                    default:
                        throw new DAOException("Unknown field id " + fieldList[i]);
                }
            }
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        bean.isNew(false);
        bean.resetIsModified();

        return bean;
    }

    /**
     * Transforms a ResultSet iterating on the sys_code on a SysCodeBean bean using the names of the columns
     *
     * @param rs the ResultSet to be transformed
     * @return bean resulting SysCodeBean bean
     * @throws DAOException
     */
    //31
    public SysCodeBean metaDataDecodeRow(ResultSet rs) throws DAOException
    {
        SysCodeBean bean = this.createSysCodeBean();
        try
        {
            bean.setLastUpdate(rs.getTimestamp("last_update"));
            bean.setSystemOrUser(rs.getString("system_or_user"));
            bean.setDescription(rs.getString("description"));
            bean.setCodeId(rs.getString("code_id"));
            bean.setCodeType(rs.getString("code_type"));
            bean.setSysCodeId(Manager.getInteger(rs, "sys_code_id"));
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }

        bean.isNew(false);
        bean.resetIsModified();

        return bean;
    }

    //////////////////////////////////////
    // PREPARED STATEMENT LOADER
    //////////////////////////////////////

    /**
     * Loads all the elements using a prepared statement.
     *
     * @param ps the PreparedStatement to be used
     * @return an array of SysCodeBean
     * @throws DAOException
     */
    //32
    public SysCodeBean[] loadByPreparedStatement(PreparedStatement ps) throws DAOException
    {
        return this.loadByPreparedStatement(ps, null);
    }

    /**
     * Loads all the elements using a prepared statement specifying a list of fields to be retrieved.
     *
     * @param ps the PreparedStatement to be used
     * @param fieldList table of the field's associated constants
     * @return an array of SysCodeBean
     * @throws DAOException
     */
    //33
    public SysCodeBean[] loadByPreparedStatement(PreparedStatement ps, int[] fieldList) throws DAOException
    {
        ResultSet rs =  null;
		List v =  null;
		try
		{
		    rs =  ps.executeQuery();
		    v = new ArrayList();
			if(fieldList == null) {
				while(rs.next()) {
					v.add(decodeRow(rs));
				}
			}
			else {
				while(rs.next()) {
					v.add(decodeRow(rs, fieldList));
				}
			}

			return (SysCodeBean[])v.toArray(new SysCodeBean[0]);
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            if (v != null) { v.clear(); v = null;}
            getManager().close(rs);
        }
    }

    /**
     * Loads all the elements using a prepared statement specifying a list of fields to be retrieved,
     * and specifying the start row and the number of rows.
     *
     * @param ps the PreparedStatement to be used
     * @param startRow the start row to be used (first row = 1, last row = -1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @param fieldList table of the field's associated constants
     * @return an array of SysCodeBean
     * @throws DAOException
     */
    //34
    public SysCodeBean[] loadByPreparedStatement(PreparedStatement ps, int[] fieldList, int startRow, int numRows) throws DAOException
    {
        ResultSet rs =  null;
        try
        {
            rs = ps.executeQuery();
            return this.decodeResultSet(rs, fieldList, startRow, numRows);
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            this.getManager().close(rs);
        }
    }

    //_____________________________________________________________________
    //
    // LISTENER
    //_____________________________________________________________________
    private SysCodeListener listener = null;

    /**
     * Registers a unique SysCodeListener listener.
     */
    //35
    public void registerListener(SysCodeListener listener)
    {
        this.listener = listener;
    }

    /**
     * Before the save of the SysCodeBean bean.
     *
     * @param bean the SysCodeBean bean to be saved
     */
    //36
    private void beforeInsert(SysCodeBean bean) throws DAOException
    {
        if (listener != null) {
            listener.beforeInsert(bean);
        }
    }

    /**
     * After the save of the SysCodeBean bean.
     *
     * @param bean the SysCodeBean bean to be saved
     */
    //37
    private void afterInsert(SysCodeBean bean) throws DAOException
    {
        if (listener != null) {
            listener.afterInsert(bean);
        }
    }

    /**
     * Before the update of the SysCodeBean bean.
     *
     * @param bean the SysCodeBean bean to be updated
     */
    //38
    private void beforeUpdate(SysCodeBean bean) throws DAOException
    {
        if (listener != null) {
            listener.beforeUpdate(bean);
        }
    }

    /**
     * After the update of the SysCodeBean bean.
     *
     * @param bean the SysCodeBean bean to be updated
     */
    //39
    private void afterUpdate(SysCodeBean bean) throws DAOException
    {
        if (listener != null) {
            listener.afterUpdate(bean);
        }
    }

    /**
     * Before the delete of the SysCodeBean bean.
     *
     * @param bean the SysCodeBean bean to be deleted
     */
    private void beforeDelete(SysCodeBean bean) throws DAOException
    {
        if (listener != null) {
            listener.beforeDelete(bean);
        }
    }

    /**
     * After the delete of the SysCodeBean bean.
     *
     * @param bean the SysCodeBean bean to be deleted
     */
    private void afterDelete(SysCodeBean bean) throws DAOException
    {
        if (listener != null) {
            listener.afterDelete(bean);
        }
    }

    //_____________________________________________________________________
    //
    // UTILS
    //_____________________________________________________________________

    /**
     * Retrieves the manager object used to get connections.
     *
     * @return the manager used
     */
    //40
    private Manager getManager()
    {
        return Manager.getInstance();
    }

    /**
     * Frees the connection.
     *
     * @param c the connection to release
     */
    //41
    private void freeConnection(Connection c)
    {
        this.getManager().releaseConnection(c); // back to pool
    }

    /**
     * Gets the connection.
     */
    //42
    private Connection getConnection() throws DAOException
    {
        try
        {
            return this.getManager().getConnection();
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
    }
}
