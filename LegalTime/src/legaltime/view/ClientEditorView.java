/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * ClientManager.java
 *
 * Created on Jul 16, 2009, 7:40:11 PM
 */

package legaltime.view;

//import java.awt.Dimension;

import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.RowFilter;
import javax.swing.RowFilter.Entry;
import javax.swing.event.InternalFrameEvent;
import javax.swing.event.InternalFrameListener;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.TableColumn;
import javax.swing.table.TableRowSorter;
import legaltime.*;
import legaltime.cache.ClientCache;
import legaltime.modelsafe.PersistanceManager;
import legaltime.model.ClientBean;
import legaltime.model.ClientManager;
import legaltime.model.exception.DAOException;
import org.jdesktop.application.Action;


/**
 *
 * @author bmartin
 */
public class ClientEditorView extends javax.swing.JInternalFrame 
        implements ListSelectionListener, InternalFrameListener  {
    LegalTimeApp mainController;
    ClientManagerTableModel clientManagerTableModel;
    ClientManager clientManager;
    private PersistanceManager persistanceManager;
    int currentSelectedRow=0;
    /** Creates new form ClientManager */

    public ClientEditorView(LegalTimeApp mainController_) {
        initComponents();
        addInternalFrameListener(this);
        mainController = mainController_;
        persistanceManager = PersistanceManager.getInstance();
        clientManager = ClientManager.getInstance();
        clientManagerTableModel = new ClientManagerTableModel();
        tblClientSelect.setModel(clientManagerTableModel);
        tblClientSelect.setAutoCreateRowSorter(true);
        
        RowFilter<ClientManagerTableModel, Object> rf = new RowFilter<ClientManagerTableModel,Object>() {
               public boolean include(Entry<? extends ClientManagerTableModel, ? extends Object> entry) {
                   if (entry.getValue(0) !=null) {return true; }
                   return false;
               }
         };
         TableRowSorter<ClientManagerTableModel> sorter = new TableRowSorter<ClientManagerTableModel>(clientManagerTableModel);
         sorter.setRowFilter(rf);
         tblClientSelect.setRowSorter(sorter);
         tblClientSelect.getRowSorter().toggleSortOrder(0);
        buildClientManagerTableColumnModel();

        setListeners();
        if (clientManagerTableModel.getRowCount()>0){
            setSelectedRow(currentSelectedRow);
        }
    }

     

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        scrlChooser = new javax.swing.JScrollPane();
        tblClientSelect = new javax.swing.JTable();
        lblFirstName = new javax.swing.JLabel();
        txtFirstName = new javax.swing.JTextField();
        txtLastName = new javax.swing.JTextField();
        lblLastName = new javax.swing.JLabel();
        txtAddress = new javax.swing.JTextField();
        lblAddress = new javax.swing.JLabel();
        txtCity = new javax.swing.JTextField();
        lblCity = new javax.swing.JLabel();
        txtState = new javax.swing.JTextField();
        lblState = new javax.swing.JLabel();
        txtZip = new javax.swing.JTextField();
        lblZip = new javax.swing.JLabel();
        lblWorkPhone = new javax.swing.JLabel();
        txtWorkPhone = new javax.swing.JTextField();
        lblHomePhone = new javax.swing.JLabel();
        txtHomePhone = new javax.swing.JTextField();
        txtCellPhone = new javax.swing.JTextField();
        lblCellPhone = new javax.swing.JLabel();
        txtFaxNum = new javax.swing.JTextField();
        lblFaxNum = new javax.swing.JLabel();
        lblBillingInformation = new javax.swing.JLabel();
        cboBillingPlan = new javax.swing.JComboBox();
        lblBillingPlan = new javax.swing.JLabel();
        scrlBillRates = new javax.swing.JScrollPane();
        tblBillRates = new javax.swing.JTable();
        scrlFollowUp = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        lblFollowUpItems = new javax.swing.JLabel();
        lblFaxNum1 = new javax.swing.JLabel();
        dtClientSince = new com.toedter.calendar.JDateChooser();
        cmdAddClient = new javax.swing.JButton();
        cmdDeleteClient = new javax.swing.JButton();
        cmdClientAccount = new javax.swing.JButton();
        cmdViewInvoiceable = new javax.swing.JButton();
        scrlNotes = new javax.swing.JScrollPane();
        txtNote = new javax.swing.JTextPane();
        lblNotes = new javax.swing.JLabel();
        lblEmail = new javax.swing.JLabel();
        txtEmail = new javax.swing.JTextField();
        cmdClearChanges = new javax.swing.JButton();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(legaltime.LegalTimeApp.class).getContext().getResourceMap(ClientEditorView.class);
        setTitle(resourceMap.getString("Form.title")); // NOI18N
        setName("Form"); // NOI18N

        scrlChooser.setName("scrlChooser"); // NOI18N

        tblClientSelect.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Name", "City"
            }
        ));
        tblClientSelect.setName("tblClientSelect"); // NOI18N
        scrlChooser.setViewportView(tblClientSelect);
        tblClientSelect.getColumnModel().getColumn(0).setHeaderValue(resourceMap.getString("tblClientSelect.columnModel.title0")); // NOI18N
        tblClientSelect.getColumnModel().getColumn(1).setMinWidth(25);
        tblClientSelect.getColumnModel().getColumn(1).setPreferredWidth(100);
        tblClientSelect.getColumnModel().getColumn(1).setMaxWidth(300);
        tblClientSelect.getColumnModel().getColumn(1).setHeaderValue(resourceMap.getString("tblClientSelect.columnModel.title1")); // NOI18N

        lblFirstName.setText(resourceMap.getString("lblFirstName.text")); // NOI18N
        lblFirstName.setName("lblFirstName"); // NOI18N

        txtFirstName.setText(resourceMap.getString("txtFirstName.text")); // NOI18N
        txtFirstName.setName("txtFirstName"); // NOI18N

        txtLastName.setName("txtLastName"); // NOI18N

        lblLastName.setText(resourceMap.getString("lblLastName.text")); // NOI18N
        lblLastName.setName("lblLastName"); // NOI18N

        txtAddress.setName("txtAddress"); // NOI18N

        lblAddress.setText(resourceMap.getString("lblAddress.text")); // NOI18N
        lblAddress.setName("lblAddress"); // NOI18N

        txtCity.setName("txtCity"); // NOI18N

        lblCity.setText(resourceMap.getString("lblCity.text")); // NOI18N
        lblCity.setName("lblCity"); // NOI18N

        txtState.setName("txtState"); // NOI18N

        lblState.setText(resourceMap.getString("lblState.text")); // NOI18N
        lblState.setName("lblState"); // NOI18N

        txtZip.setName("txtZip"); // NOI18N

        lblZip.setText(resourceMap.getString("lblZip.text")); // NOI18N
        lblZip.setName("lblZip"); // NOI18N

        lblWorkPhone.setText(resourceMap.getString("lblWorkPhone.text")); // NOI18N
        lblWorkPhone.setName("lblWorkPhone"); // NOI18N

        txtWorkPhone.setName("txtWorkPhone"); // NOI18N

        lblHomePhone.setText(resourceMap.getString("lblHomePhone.text")); // NOI18N
        lblHomePhone.setName("lblHomePhone"); // NOI18N

        txtHomePhone.setText(resourceMap.getString("txtHomePhone.text")); // NOI18N
        txtHomePhone.setName("txtHomePhone"); // NOI18N

        txtCellPhone.setName("txtCellPhone"); // NOI18N

        lblCellPhone.setText(resourceMap.getString("lblCellPhone.text")); // NOI18N
        lblCellPhone.setName("lblCellPhone"); // NOI18N

        txtFaxNum.setName("txtFaxNum"); // NOI18N

        lblFaxNum.setText(resourceMap.getString("lblFaxNum.text")); // NOI18N
        lblFaxNum.setName("lblFaxNum"); // NOI18N

        lblBillingInformation.setText(resourceMap.getString("lblBillingInformation.text")); // NOI18N
        lblBillingInformation.setEnabled(false);
        lblBillingInformation.setName("lblBillingInformation"); // NOI18N

        cboBillingPlan.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Monthly", "Hourly" }));
        cboBillingPlan.setName("cboBillPlan"); // NOI18N

        lblBillingPlan.setText(resourceMap.getString("lblBillingPlan.text")); // NOI18N
        lblBillingPlan.setEnabled(false);
        lblBillingPlan.setName("lblBillingPlan"); // NOI18N

        scrlBillRates.setEnabled(false);
        scrlBillRates.setName("scrlBillRates"); // NOI18N

        tblBillRates.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"Attorney", "$300"},
                {"Assistant", "$75"},
                {"Clerk", "$200"},
                {null, null}
            },
            new String [] {
                "Bill Level", "Bill Rate"
            }
        ));
        tblBillRates.setName("tblBillRates"); // NOI18N
        scrlBillRates.setViewportView(tblBillRates);
        tblBillRates.getColumnModel().getColumn(0).setHeaderValue(resourceMap.getString("tblBillRates.columnModel.title0")); // NOI18N
        tblBillRates.getColumnModel().getColumn(1).setHeaderValue(resourceMap.getString("tblBillRates.columnModel.title1")); // NOI18N

        scrlFollowUp.setName("scrlFollowUp"); // NOI18N

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Due Date", "Description"
            }
        ));
        jTable2.setEnabled(false);
        jTable2.setName("jTable2"); // NOI18N
        scrlFollowUp.setViewportView(jTable2);
        jTable2.getColumnModel().getColumn(0).setMinWidth(75);
        jTable2.getColumnModel().getColumn(0).setPreferredWidth(75);
        jTable2.getColumnModel().getColumn(0).setMaxWidth(75);
        jTable2.getColumnModel().getColumn(0).setHeaderValue(resourceMap.getString("jTable2.columnModel.title0")); // NOI18N
        jTable2.getColumnModel().getColumn(1).setHeaderValue(resourceMap.getString("jTable2.columnModel.title1")); // NOI18N

        lblFollowUpItems.setText(resourceMap.getString("lblFollowUpItems.text")); // NOI18N
        lblFollowUpItems.setName("lblFollowUpItems"); // NOI18N

        lblFaxNum1.setText(resourceMap.getString("lblFaxNum1.text")); // NOI18N
        lblFaxNum1.setName("lblFaxNum1"); // NOI18N

        dtClientSince.setName("dtClientSince"); // NOI18N

        javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance(legaltime.LegalTimeApp.class).getContext().getActionMap(ClientEditorView.class, this);
        cmdAddClient.setAction(actionMap.get("addNewClient")); // NOI18N
        cmdAddClient.setText(resourceMap.getString("cmdAddClient.text")); // NOI18N
        cmdAddClient.setName("cmdAddClient"); // NOI18N

        cmdDeleteClient.setAction(actionMap.get("deactivateClient")); // NOI18N
        cmdDeleteClient.setText(resourceMap.getString("cmdDeleteClient.text")); // NOI18N
        cmdDeleteClient.setName("cmdDeleteClient"); // NOI18N

        cmdClientAccount.setText(resourceMap.getString("cmdClientAccount.text")); // NOI18N
        cmdClientAccount.setName("cmdClientAccount"); // NOI18N

        cmdViewInvoiceable.setText(resourceMap.getString("cmdViewInvoiceable.text")); // NOI18N
        cmdViewInvoiceable.setName("cmdViewInvoiceable"); // NOI18N

        scrlNotes.setName("scrlNotes"); // NOI18N

        txtNote.setName("txtNote"); // NOI18N
        scrlNotes.setViewportView(txtNote);

        lblNotes.setText(resourceMap.getString("lblNotes.text")); // NOI18N
        lblNotes.setName("lblNotes"); // NOI18N

        lblEmail.setText(resourceMap.getString("lblEmail.text")); // NOI18N
        lblEmail.setName("lblEmail"); // NOI18N

        txtEmail.setName("txtEmail"); // NOI18N

        cmdClearChanges.setAction(actionMap.get("clearChanges")); // NOI18N
        cmdClearChanges.setText(resourceMap.getString("cmdClearChanges.text")); // NOI18N
        cmdClearChanges.setName("cmdClearChanges"); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(scrlChooser, javax.swing.GroupLayout.PREFERRED_SIZE, 337, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(30, 30, 30)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblEmail, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(lblFaxNum, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(lblCellPhone, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(lblFirstName, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(lblAddress, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(lblLastName, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(lblFaxNum1, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(lblCity, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(lblState, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(lblHomePhone, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(lblNotes, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(lblWorkPhone, javax.swing.GroupLayout.Alignment.TRAILING))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtFaxNum, javax.swing.GroupLayout.DEFAULT_SIZE, 196, Short.MAX_VALUE)
                                    .addComponent(txtFirstName, javax.swing.GroupLayout.DEFAULT_SIZE, 196, Short.MAX_VALUE)
                                    .addComponent(txtAddress, javax.swing.GroupLayout.DEFAULT_SIZE, 196, Short.MAX_VALUE)
                                    .addComponent(txtLastName, javax.swing.GroupLayout.DEFAULT_SIZE, 196, Short.MAX_VALUE)
                                    .addComponent(txtEmail, javax.swing.GroupLayout.DEFAULT_SIZE, 196, Short.MAX_VALUE)
                                    .addComponent(dtClientSince, javax.swing.GroupLayout.DEFAULT_SIZE, 196, Short.MAX_VALUE)
                                    .addComponent(txtCity, javax.swing.GroupLayout.DEFAULT_SIZE, 196, Short.MAX_VALUE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(txtState, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(lblZip)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(txtZip, javax.swing.GroupLayout.DEFAULT_SIZE, 85, Short.MAX_VALUE))
                                    .addComponent(txtWorkPhone, javax.swing.GroupLayout.DEFAULT_SIZE, 196, Short.MAX_VALUE)
                                    .addComponent(txtHomePhone, javax.swing.GroupLayout.DEFAULT_SIZE, 196, Short.MAX_VALUE)
                                    .addComponent(scrlNotes, javax.swing.GroupLayout.DEFAULT_SIZE, 196, Short.MAX_VALUE)
                                    .addComponent(txtCellPhone, javax.swing.GroupLayout.DEFAULT_SIZE, 196, Short.MAX_VALUE))
                                .addGap(42, 42, 42))
                            .addComponent(scrlBillRates, 0, 0, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(lblBillingInformation)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 247, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(lblBillingPlan)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(cboBillingPlan, 0, 273, Short.MAX_VALUE)))
                        .addGap(32, 32, 32))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblFollowUpItems)
                        .addContainerGap(631, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(cmdClientAccount)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cmdViewInvoiceable)
                        .addContainerGap(479, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(cmdAddClient)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cmdDeleteClient)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cmdClearChanges)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(scrlFollowUp, javax.swing.GroupLayout.PREFERRED_SIZE, 644, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtFirstName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblFirstName))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtLastName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblLastName))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtAddress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblAddress))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtCity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblCity))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtState, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblState)
                            .addComponent(lblZip)
                            .addComponent(txtZip, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtWorkPhone, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblWorkPhone))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtHomePhone, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblHomePhone))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblCellPhone)
                            .addComponent(txtCellPhone, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblFaxNum)
                            .addComponent(txtFaxNum, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(lblFaxNum1)
                            .addComponent(dtClientSince, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblEmail)
                            .addComponent(txtEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(11, 11, 11)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblNotes)
                                .addGap(24, 24, 24)
                                .addComponent(lblBillingInformation))
                            .addComponent(scrlNotes, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cboBillingPlan, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblBillingPlan))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(scrlBillRates, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(scrlChooser, javax.swing.GroupLayout.PREFERRED_SIZE, 467, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmdAddClient)
                    .addComponent(cmdDeleteClient)
                    .addComponent(cmdClearChanges))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblFollowUpItems)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(scrlFollowUp, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cmdViewInvoiceable)
                    .addComponent(cmdClientAccount))
                .addGap(29, 29, 29))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JComboBox cboBillingPlan;
    private javax.swing.JButton cmdAddClient;
    private javax.swing.JButton cmdClearChanges;
    private javax.swing.JButton cmdClientAccount;
    private javax.swing.JButton cmdDeleteClient;
    private javax.swing.JButton cmdViewInvoiceable;
    private com.toedter.calendar.JDateChooser dtClientSince;
    private javax.swing.JTable jTable2;
    private javax.swing.JLabel lblAddress;
    private javax.swing.JLabel lblBillingInformation;
    private javax.swing.JLabel lblBillingPlan;
    private javax.swing.JLabel lblCellPhone;
    private javax.swing.JLabel lblCity;
    private javax.swing.JLabel lblEmail;
    private javax.swing.JLabel lblFaxNum;
    private javax.swing.JLabel lblFaxNum1;
    private javax.swing.JLabel lblFirstName;
    private javax.swing.JLabel lblFollowUpItems;
    private javax.swing.JLabel lblHomePhone;
    private javax.swing.JLabel lblLastName;
    private javax.swing.JLabel lblNotes;
    private javax.swing.JLabel lblState;
    private javax.swing.JLabel lblWorkPhone;
    private javax.swing.JLabel lblZip;
    private javax.swing.JScrollPane scrlBillRates;
    private javax.swing.JScrollPane scrlChooser;
    private javax.swing.JScrollPane scrlFollowUp;
    private javax.swing.JScrollPane scrlNotes;
    private javax.swing.JTable tblBillRates;
    private javax.swing.JTable tblClientSelect;
    private javax.swing.JTextField txtAddress;
    private javax.swing.JTextField txtCellPhone;
    private javax.swing.JTextField txtCity;
    private javax.swing.JTextField txtEmail;
    private javax.swing.JTextField txtFaxNum;
    private javax.swing.JTextField txtFirstName;
    private javax.swing.JTextField txtHomePhone;
    private javax.swing.JTextField txtLastName;
    private javax.swing.JTextPane txtNote;
    private javax.swing.JTextField txtState;
    private javax.swing.JTextField txtWorkPhone;
    private javax.swing.JTextField txtZip;
    // End of variables declaration//GEN-END:variables

    private void buildClientManagerTableColumnModel() {
        TableColumn tc;
        //Name
         tc = tblClientSelect.getColumnModel().getColumn(0);
         tc.setPreferredWidth(300);
         tc.setMinWidth(100);
         tc.setMaxWidth(400);
         //City
         tc = tblClientSelect.getColumnModel().getColumn(1);
         tc.setPreferredWidth(100);
         tc.setMinWidth(50);
         tc.setMaxWidth(200);
    }
    private void setListeners(){
        tblClientSelect.getSelectionModel().addListSelectionListener(this);
        
    }


     public void valueChanged(ListSelectionEvent event) {
         int newSelectedRow;
         
            if (event.getValueIsAdjusting()) {
               saveChanges();
                return;
            }
            if(tblClientSelect.getRowCount() >0 && tblClientSelect.getSelectedRow()>=0){
            newSelectedRow = tblClientSelect.getSelectedRow();
            currentSelectedRow=tblClientSelect.getRowSorter().convertRowIndexToModel(newSelectedRow);
            synchDisplayToBean(clientManagerTableModel.getBeanByRow(currentSelectedRow ));
            }
                //currentSelectedRow = newSelectedRow;
            System.out.println(tblClientSelect.getSelectedRow() +" "+currentSelectedRow);
            mainController.setStatusText("Ready");
        }
     
     public void saveChanges(){
        mainController.setStatusText("Evaluating changes...");
        mainController.setLastActionText("No changes to previous client.");
        synchBeanToDisplay(clientManagerTableModel.getBeanByRow(currentSelectedRow ));
       if(clientManagerTableModel.getBeanByRow(currentSelectedRow ).isModified()){
            try {
                clientManager.save(clientManagerTableModel.getBeanByRow(currentSelectedRow));
                mainController.setLastActionText("Saved Client Information");
            } catch (DAOException ex) {
                mainController.setLastActionText("Error saving client save : " + ex.getMessage());
                Logger.getLogger(ClientEditorView.class.getName()).log(Level.SEVERE, null, ex);
            }
        }else{
            mainController.setLastActionText("No changes to previous client.");
        }
        mainController.setStatusText("Ready");
     }


     public void synchBeanToDisplay(ClientBean bean_){
         bean_.setAddress(txtAddress.getText());
         bean_.setCellPhone(txtCellPhone.getText());
         bean_.setCity(txtCity.getText());
         try{
            bean_.setClientSinceDt(dtClientSince.getDate());
         }catch(Exception e){
            bean_.setClientSinceDt(new Date());
         }
         bean_.setEmail(txtEmail.getText());
         bean_.setFax(txtFaxNum.getText());
         bean_.setFirstName(txtFirstName.getText());
         bean_.setHomePhone(txtHomePhone.getText());
         bean_.setLastName(txtLastName.getText());
         bean_.setNote(txtNote.getText());
         bean_.setState(txtState.getText());
         bean_.setWorkPhone(txtWorkPhone.getText());
         bean_.setZip(txtZip.getText());

     }
     public void synchDisplayToBean(ClientBean bean_){
         txtAddress.setText(bean_.getAddress());
         txtCellPhone.setText(bean_.getCellPhone());
         txtCity.setText(bean_.getCity());
         dtClientSince.setDate(bean_.getClientSinceDt());
         txtEmail.setText(bean_.getEmail());
         txtFaxNum.setText(bean_.getFax());
         txtFirstName.setText(bean_.getFirstName());
         txtHomePhone.setText(bean_.getHomePhone());
         txtLastName.setText(bean_.getLastName());
         txtNote.setText(bean_.getNote());
         txtState.setText(bean_.getState());
         txtWorkPhone.setText(bean_.getWorkPhone());
         txtZip.setText(bean_.getZip());

     }
     
     public void clearDisplay(){
         txtAddress.setText("");
         txtCellPhone.setText("");
         txtCity.setText("");
         dtClientSince.setDate(null);
         txtEmail.setText("");
         txtFaxNum.setText("");
         txtFirstName.setText("");
         txtHomePhone.setText("");
         txtLastName.setText("");
         txtNote.setText("");
         txtState.setText("");
         txtWorkPhone.setText("");
         txtZip.setText("");

     }


     @Action
     public void clearChanges(){
         synchDisplayToBean(clientManagerTableModel.getBeanByRow(currentSelectedRow ));
     }

     @Action
     public void addNewClient(){
         if (tblClientSelect.getRowCount()>0){ saveChanges();}
         ClientBean newClientBean = clientManager.createClientBean();
         newClientBean.setLastName("_Customer");
         newClientBean.setFirstName("New");
         newClientBean.setClientSinceDt(new Date());
         newClientBean.setActiveYn("Y");
         //synchDisplayToBean(newClientBean);
         
        try {
            clientManager.save(newClientBean);
            mainController.setLastActionText("Successfully added new client ");
        } catch (DAOException ex) {
            Logger.getLogger(ClientEditorView.class.getName()).log(Level.SEVERE, null, ex);
            mainController.setLastActionText("Error adding new client: " + ex.getMessage());
        }
         persistanceManager.loadClientCache();
         System.out.println("clients:" + ClientCache.getInstance().getLength());
         tblClientSelect.revalidate();
         tblClientSelect.repaint();
         tblClientSelect.getRowSorter().allRowsChanged();
         setSelectedRow(0);


     }

     private void setSelectedRow(int row ){
         tblClientSelect.getSelectionModel().setSelectionInterval(
                    row, row);
     }

     @Action
     public void deactivateClient(){
         mainController.setLastActionText("Client deactivation in process. ");     
         clientManagerTableModel.getBeanByRow(currentSelectedRow).setActiveYn("N");
        try {
            clientManager.save(clientManagerTableModel.getBeanByRow(currentSelectedRow));
            mainController.setLastActionText("Client deactivated. ");
        } catch (DAOException ex) {
            Logger.getLogger(ClientEditorView.class.getName()).log(Level.SEVERE, null, ex);
            mainController.setLastActionText("Error saving client " + ex.getMessage());
        }
        tblClientSelect.revalidate();
        tblClientSelect.repaint();
        mainController.setLastActionText("Client deactivation completed. ");
        tblClientSelect.getRowSorter().allRowsChanged();
        clearDisplay();
     }
     
     public void internalFrameClosing( InternalFrameEvent e ) {
        saveChanges();
        this.dispose();
         
     }

    public void internalFrameOpened(InternalFrameEvent e) {

    }

    public void internalFrameClosed(InternalFrameEvent e) {

    }

    public void internalFrameIconified(InternalFrameEvent e) {

    }

    public void internalFrameDeiconified(InternalFrameEvent e) {

    }

    public void internalFrameActivated(InternalFrameEvent e) {

    }

    public void internalFrameDeactivated(InternalFrameEvent e) {

    }
}

