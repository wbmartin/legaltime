// ______________________________________________________
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: com.mysql.jdbc.Driver
//
// Please help us improve this tool by reporting:
// - problems and suggestions to
//   http://sourceforge.net/tracker/?group_id=54687
// - feedbacks and ideas on
//   http://sourceforge.net/forum/forum.php?forum_id=182208
// ______________________________________________________

package legaltime.model;

import java.io.Serializable;
import java.util.Map;
import java.util.HashMap;

import legaltime.model.GeneratedBean;
import legaltime.model.ClientAccountRegisterBean;
import legaltime.model.FollowupBean;
import legaltime.model.InvoiceBean;
import legaltime.model.LaborRegisterBean;
import legaltime.model.PaymentLogBean;

import org.apache.commons.lang.builder.CompareToBuilder;
import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;
import org.apache.commons.lang.builder.ToStringStyle;

/**
 * ClientBean is a mapping of client Table.
 * @author sql2java
*/
public class ClientBean
    implements Serializable, GeneratedBean
{
	private static final long serialVersionUID = -2313076712092913235L;
	
    private java.util.Date lastUpdate;

    private boolean lastUpdateIsModified = false;
    private boolean lastUpdateIsInitialized = false;

    private String activeYn;

    private boolean activeYnIsModified = false;
    private boolean activeYnIsInitialized = false;

    private Double monthlyBillRate;

    private boolean monthlyBillRateIsModified = false;
    private boolean monthlyBillRateIsInitialized = false;

    private String billType;

    private boolean billTypeIsModified = false;
    private boolean billTypeIsInitialized = false;

    private String note;

    private boolean noteIsModified = false;
    private boolean noteIsInitialized = false;

    private java.util.Date clientSinceDt;

    private boolean clientSinceDtIsModified = false;
    private boolean clientSinceDtIsInitialized = false;

    private String email;

    private boolean emailIsModified = false;
    private boolean emailIsInitialized = false;

    private String fax;

    private boolean faxIsModified = false;
    private boolean faxIsInitialized = false;

    private String cellPhone;

    private boolean cellPhoneIsModified = false;
    private boolean cellPhoneIsInitialized = false;

    private String homePhone;

    private boolean homePhoneIsModified = false;
    private boolean homePhoneIsInitialized = false;

    private String workPhone;

    private boolean workPhoneIsModified = false;
    private boolean workPhoneIsInitialized = false;

    private String zip;

    private boolean zipIsModified = false;
    private boolean zipIsInitialized = false;

    private String state;

    private boolean stateIsModified = false;
    private boolean stateIsInitialized = false;

    private String city;

    private boolean cityIsModified = false;
    private boolean cityIsInitialized = false;

    private String address;

    private boolean addressIsModified = false;
    private boolean addressIsInitialized = false;

    private String lastName;

    private boolean lastNameIsModified = false;
    private boolean lastNameIsInitialized = false;

    private String firstName;

    private boolean firstNameIsModified = false;
    private boolean firstNameIsInitialized = false;

    private Integer clientId;

    private boolean clientIdIsModified = false;
    private boolean clientIdIsInitialized = false;

    private boolean _isNew = true;

    /**
     * Prefered methods to create a ClientBean is via the createClientBean method in ClientManager or
     * via the factory class ClientFactory create method
     */
    protected ClientBean()
    {
    }

    /**
     * Getter method for lastUpdate.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: client.last_update</li>
     * <li>column size: 19</li>
     * <li>jdbc type returned by the driver: Types.TIMESTAMP</li>
     * </ul>
     *
     * @return the value of lastUpdate
     */
    public java.util.Date getLastUpdate()
    {
        return lastUpdate;
    }

    /**
     * Setter method for lastUpdate.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to lastUpdate
     */
    public void setLastUpdate(java.util.Date newVal)
    {
        if ((newVal != null && lastUpdate != null && (newVal.compareTo(lastUpdate) == 0)) ||
            (newVal == null && lastUpdate == null && lastUpdateIsInitialized)) {
            return;
        }
        lastUpdate = newVal;
        lastUpdateIsModified = true;
        lastUpdateIsInitialized = true;
    }

    /**
     * Setter method for lastUpdate.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to lastUpdate
     */
    public void setLastUpdate(long newVal)
    {
        setLastUpdate(new java.util.Date(newVal));
    }

    /**
     * Determines if the lastUpdate has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isLastUpdateModified()
    {
        return lastUpdateIsModified;
    }

    /**
     * Determines if the lastUpdate has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isLastUpdateInitialized()
    {
        return lastUpdateIsInitialized;
    }

    /**
     * Getter method for activeYn.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: client.active_yn</li>
     * <li>column size: 1</li>
     * <li>jdbc type returned by the driver: Types.CHAR</li>
     * </ul>
     *
     * @return the value of activeYn
     */
    public String getActiveYn()
    {
        return activeYn;
    }

    /**
     * Setter method for activeYn.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to activeYn
     */
    public void setActiveYn(String newVal)
    {
        if ((newVal != null && activeYn != null && (newVal.compareTo(activeYn) == 0)) ||
            (newVal == null && activeYn == null && activeYnIsInitialized)) {
            return;
        }
        activeYn = newVal;
        activeYnIsModified = true;
        activeYnIsInitialized = true;
    }

    /**
     * Determines if the activeYn has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isActiveYnModified()
    {
        return activeYnIsModified;
    }

    /**
     * Determines if the activeYn has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isActiveYnInitialized()
    {
        return activeYnIsInitialized;
    }

    /**
     * Getter method for monthlyBillRate.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: client.monthly_bill_rate</li>
     * <li>column size: 22</li>
     * <li>jdbc type returned by the driver: Types.DOUBLE</li>
     * </ul>
     *
     * @return the value of monthlyBillRate
     */
    public Double getMonthlyBillRate()
    {
        return monthlyBillRate;
    }

    /**
     * Setter method for monthlyBillRate.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to monthlyBillRate
     */
    public void setMonthlyBillRate(Double newVal)
    {
        if ((newVal != null && monthlyBillRate != null && (newVal.compareTo(monthlyBillRate) == 0)) ||
            (newVal == null && monthlyBillRate == null && monthlyBillRateIsInitialized)) {
            return;
        }
        monthlyBillRate = newVal;
        monthlyBillRateIsModified = true;
        monthlyBillRateIsInitialized = true;
    }

    /**
     * Setter method for monthlyBillRate.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to monthlyBillRate
     */
    public void setMonthlyBillRate(double newVal)
    {
        setMonthlyBillRate(new Double(newVal));
    }

    /**
     * Determines if the monthlyBillRate has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isMonthlyBillRateModified()
    {
        return monthlyBillRateIsModified;
    }

    /**
     * Determines if the monthlyBillRate has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isMonthlyBillRateInitialized()
    {
        return monthlyBillRateIsInitialized;
    }

    /**
     * Getter method for billType.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: client.bill_type</li>
     * <li>column size: 25</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of billType
     */
    public String getBillType()
    {
        return billType;
    }

    /**
     * Setter method for billType.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to billType
     */
    public void setBillType(String newVal)
    {
        if ((newVal != null && billType != null && (newVal.compareTo(billType) == 0)) ||
            (newVal == null && billType == null && billTypeIsInitialized)) {
            return;
        }
        billType = newVal;
        billTypeIsModified = true;
        billTypeIsInitialized = true;
    }

    /**
     * Determines if the billType has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isBillTypeModified()
    {
        return billTypeIsModified;
    }

    /**
     * Determines if the billType has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isBillTypeInitialized()
    {
        return billTypeIsInitialized;
    }

    /**
     * Getter method for note.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: client.note</li>
     * <li>column size: 65535</li>
     * <li>jdbc type returned by the driver: Types.LONGVARCHAR</li>
     * </ul>
     *
     * @return the value of note
     */
    public String getNote()
    {
        return note;
    }

    /**
     * Setter method for note.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to note
     */
    public void setNote(String newVal)
    {
        if ((newVal != null && note != null && (newVal.compareTo(note) == 0)) ||
            (newVal == null && note == null && noteIsInitialized)) {
            return;
        }
        note = newVal;
        noteIsModified = true;
        noteIsInitialized = true;
    }

    /**
     * Determines if the note has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isNoteModified()
    {
        return noteIsModified;
    }

    /**
     * Determines if the note has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isNoteInitialized()
    {
        return noteIsInitialized;
    }

    /**
     * Getter method for clientSinceDt.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: client.client_since_dt</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.DATE</li>
     * </ul>
     *
     * @return the value of clientSinceDt
     */
    public java.util.Date getClientSinceDt()
    {
        return clientSinceDt;
    }

    /**
     * Setter method for clientSinceDt.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to clientSinceDt
     */
    public void setClientSinceDt(java.util.Date newVal)
    {
        if ((newVal != null && clientSinceDt != null && (newVal.compareTo(clientSinceDt) == 0)) ||
            (newVal == null && clientSinceDt == null && clientSinceDtIsInitialized)) {
            return;
        }
        clientSinceDt = newVal;
        clientSinceDtIsModified = true;
        clientSinceDtIsInitialized = true;
    }

    /**
     * Setter method for clientSinceDt.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to clientSinceDt
     */
    public void setClientSinceDt(long newVal)
    {
        setClientSinceDt(new java.util.Date(newVal));
    }

    /**
     * Determines if the clientSinceDt has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isClientSinceDtModified()
    {
        return clientSinceDtIsModified;
    }

    /**
     * Determines if the clientSinceDt has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isClientSinceDtInitialized()
    {
        return clientSinceDtIsInitialized;
    }

    /**
     * Getter method for email.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: client.email</li>
     * <li>column size: 50</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of email
     */
    public String getEmail()
    {
        return email;
    }

    /**
     * Setter method for email.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to email
     */
    public void setEmail(String newVal)
    {
        if ((newVal != null && email != null && (newVal.compareTo(email) == 0)) ||
            (newVal == null && email == null && emailIsInitialized)) {
            return;
        }
        email = newVal;
        emailIsModified = true;
        emailIsInitialized = true;
    }

    /**
     * Determines if the email has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isEmailModified()
    {
        return emailIsModified;
    }

    /**
     * Determines if the email has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isEmailInitialized()
    {
        return emailIsInitialized;
    }

    /**
     * Getter method for fax.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: client.fax</li>
     * <li>column size: 30</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of fax
     */
    public String getFax()
    {
        return fax;
    }

    /**
     * Setter method for fax.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to fax
     */
    public void setFax(String newVal)
    {
        if ((newVal != null && fax != null && (newVal.compareTo(fax) == 0)) ||
            (newVal == null && fax == null && faxIsInitialized)) {
            return;
        }
        fax = newVal;
        faxIsModified = true;
        faxIsInitialized = true;
    }

    /**
     * Determines if the fax has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isFaxModified()
    {
        return faxIsModified;
    }

    /**
     * Determines if the fax has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isFaxInitialized()
    {
        return faxIsInitialized;
    }

    /**
     * Getter method for cellPhone.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: client.cell_phone</li>
     * <li>column size: 30</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of cellPhone
     */
    public String getCellPhone()
    {
        return cellPhone;
    }

    /**
     * Setter method for cellPhone.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to cellPhone
     */
    public void setCellPhone(String newVal)
    {
        if ((newVal != null && cellPhone != null && (newVal.compareTo(cellPhone) == 0)) ||
            (newVal == null && cellPhone == null && cellPhoneIsInitialized)) {
            return;
        }
        cellPhone = newVal;
        cellPhoneIsModified = true;
        cellPhoneIsInitialized = true;
    }

    /**
     * Determines if the cellPhone has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isCellPhoneModified()
    {
        return cellPhoneIsModified;
    }

    /**
     * Determines if the cellPhone has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isCellPhoneInitialized()
    {
        return cellPhoneIsInitialized;
    }

    /**
     * Getter method for homePhone.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: client.home_phone</li>
     * <li>column size: 30</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of homePhone
     */
    public String getHomePhone()
    {
        return homePhone;
    }

    /**
     * Setter method for homePhone.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to homePhone
     */
    public void setHomePhone(String newVal)
    {
        if ((newVal != null && homePhone != null && (newVal.compareTo(homePhone) == 0)) ||
            (newVal == null && homePhone == null && homePhoneIsInitialized)) {
            return;
        }
        homePhone = newVal;
        homePhoneIsModified = true;
        homePhoneIsInitialized = true;
    }

    /**
     * Determines if the homePhone has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isHomePhoneModified()
    {
        return homePhoneIsModified;
    }

    /**
     * Determines if the homePhone has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isHomePhoneInitialized()
    {
        return homePhoneIsInitialized;
    }

    /**
     * Getter method for workPhone.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: client.work_phone</li>
     * <li>column size: 30</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of workPhone
     */
    public String getWorkPhone()
    {
        return workPhone;
    }

    /**
     * Setter method for workPhone.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to workPhone
     */
    public void setWorkPhone(String newVal)
    {
        if ((newVal != null && workPhone != null && (newVal.compareTo(workPhone) == 0)) ||
            (newVal == null && workPhone == null && workPhoneIsInitialized)) {
            return;
        }
        workPhone = newVal;
        workPhoneIsModified = true;
        workPhoneIsInitialized = true;
    }

    /**
     * Determines if the workPhone has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isWorkPhoneModified()
    {
        return workPhoneIsModified;
    }

    /**
     * Determines if the workPhone has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isWorkPhoneInitialized()
    {
        return workPhoneIsInitialized;
    }

    /**
     * Getter method for zip.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: client.zip</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of zip
     */
    public String getZip()
    {
        return zip;
    }

    /**
     * Setter method for zip.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to zip
     */
    public void setZip(String newVal)
    {
        if ((newVal != null && zip != null && (newVal.compareTo(zip) == 0)) ||
            (newVal == null && zip == null && zipIsInitialized)) {
            return;
        }
        zip = newVal;
        zipIsModified = true;
        zipIsInitialized = true;
    }

    /**
     * Determines if the zip has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isZipModified()
    {
        return zipIsModified;
    }

    /**
     * Determines if the zip has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isZipInitialized()
    {
        return zipIsInitialized;
    }

    /**
     * Getter method for state.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: client.state</li>
     * <li>column size: 2</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of state
     */
    public String getState()
    {
        return state;
    }

    /**
     * Setter method for state.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to state
     */
    public void setState(String newVal)
    {
        if ((newVal != null && state != null && (newVal.compareTo(state) == 0)) ||
            (newVal == null && state == null && stateIsInitialized)) {
            return;
        }
        state = newVal;
        stateIsModified = true;
        stateIsInitialized = true;
    }

    /**
     * Determines if the state has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isStateModified()
    {
        return stateIsModified;
    }

    /**
     * Determines if the state has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isStateInitialized()
    {
        return stateIsInitialized;
    }

    /**
     * Getter method for city.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: client.city</li>
     * <li>column size: 50</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of city
     */
    public String getCity()
    {
        return city;
    }

    /**
     * Setter method for city.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to city
     */
    public void setCity(String newVal)
    {
        if ((newVal != null && city != null && (newVal.compareTo(city) == 0)) ||
            (newVal == null && city == null && cityIsInitialized)) {
            return;
        }
        city = newVal;
        cityIsModified = true;
        cityIsInitialized = true;
    }

    /**
     * Determines if the city has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isCityModified()
    {
        return cityIsModified;
    }

    /**
     * Determines if the city has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isCityInitialized()
    {
        return cityIsInitialized;
    }

    /**
     * Getter method for address.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: client.address</li>
     * <li>column size: 100</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of address
     */
    public String getAddress()
    {
        return address;
    }

    /**
     * Setter method for address.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to address
     */
    public void setAddress(String newVal)
    {
        if ((newVal != null && address != null && (newVal.compareTo(address) == 0)) ||
            (newVal == null && address == null && addressIsInitialized)) {
            return;
        }
        address = newVal;
        addressIsModified = true;
        addressIsInitialized = true;
    }

    /**
     * Determines if the address has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isAddressModified()
    {
        return addressIsModified;
    }

    /**
     * Determines if the address has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isAddressInitialized()
    {
        return addressIsInitialized;
    }

    /**
     * Getter method for lastName.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: client.last_name</li>
     * <li>column size: 50</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of lastName
     */
    public String getLastName()
    {
        return lastName;
    }

    /**
     * Setter method for lastName.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to lastName
     */
    public void setLastName(String newVal)
    {
        if ((newVal != null && lastName != null && (newVal.compareTo(lastName) == 0)) ||
            (newVal == null && lastName == null && lastNameIsInitialized)) {
            return;
        }
        lastName = newVal;
        lastNameIsModified = true;
        lastNameIsInitialized = true;
    }

    /**
     * Determines if the lastName has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isLastNameModified()
    {
        return lastNameIsModified;
    }

    /**
     * Determines if the lastName has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isLastNameInitialized()
    {
        return lastNameIsInitialized;
    }

    /**
     * Getter method for firstName.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: client.first_name</li>
     * <li>column size: 50</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of firstName
     */
    public String getFirstName()
    {
        return firstName;
    }

    /**
     * Setter method for firstName.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to firstName
     */
    public void setFirstName(String newVal)
    {
        if ((newVal != null && firstName != null && (newVal.compareTo(firstName) == 0)) ||
            (newVal == null && firstName == null && firstNameIsInitialized)) {
            return;
        }
        firstName = newVal;
        firstNameIsModified = true;
        firstNameIsInitialized = true;
    }

    /**
     * Determines if the firstName has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isFirstNameModified()
    {
        return firstNameIsModified;
    }

    /**
     * Determines if the firstName has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isFirstNameInitialized()
    {
        return firstNameIsInitialized;
    }

    /**
     * Getter method for clientId.
     * <br>
     * PRIMARY KEY.<br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: client.client_id</li>
     * <li> imported key: client_account_register.client_id</li>
     * <li> imported key: followup.client_id</li>
     * <li> imported key: invoice.client_id</li>
     * <li> imported key: labor_register.client_id</li>
     * <li> imported key: payment_log.client_id</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of clientId
     */
    public Integer getClientId()
    {
        return clientId;
    }

    /**
     * Setter method for clientId.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to clientId
     */
    public void setClientId(Integer newVal)
    {
        if ((newVal != null && clientId != null && (newVal.compareTo(clientId) == 0)) ||
            (newVal == null && clientId == null && clientIdIsInitialized)) {
            return;
        }
        clientId = newVal;
        clientIdIsModified = true;
        clientIdIsInitialized = true;
    }

    /**
     * Setter method for clientId.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to clientId
     */
    public void setClientId(int newVal)
    {
        setClientId(new Integer(newVal));
    }

    /**
     * Determines if the clientId has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isClientIdModified()
    {
        return clientIdIsModified;
    }

    /**
     * Determines if the clientId has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isClientIdInitialized()
    {
        return clientIdIsInitialized;
    }

    /**
     * Determines if the current object is new.
     *
     * @return true if the current object is new, false if the object is not new
     */
    public boolean isNew()
    {
        return _isNew;
    }

    /**
     * Specifies to the object if it has been set as new.
     *
     * @param isNew the boolean value to be assigned to the isNew field
     */
    public void isNew(boolean isNew)
    {
        this._isNew = isNew;
    }

    /**
     * Determines if the object has been modified since the last time this method was called.
     * <br>
     * We can also determine if this object has ever been modified since its creation.
     *
     * @return true if the object has been modified, false if the object has not been modified
     */
    public boolean isModified()
    {
        return lastUpdateIsModified 		|| activeYnIsModified  		|| monthlyBillRateIsModified  		|| billTypeIsModified  		|| noteIsModified  		|| clientSinceDtIsModified  		|| emailIsModified  		|| faxIsModified  		|| cellPhoneIsModified  		|| homePhoneIsModified  		|| workPhoneIsModified  		|| zipIsModified  		|| stateIsModified  		|| cityIsModified  		|| addressIsModified  		|| lastNameIsModified  		|| firstNameIsModified  		|| clientIdIsModified  ;
    }

    /**
     * Resets the object modification status to 'not modified'.
     */
    public void resetIsModified()
    {
        lastUpdateIsModified = false;
        activeYnIsModified = false;
        monthlyBillRateIsModified = false;
        billTypeIsModified = false;
        noteIsModified = false;
        clientSinceDtIsModified = false;
        emailIsModified = false;
        faxIsModified = false;
        cellPhoneIsModified = false;
        homePhoneIsModified = false;
        workPhoneIsModified = false;
        zipIsModified = false;
        stateIsModified = false;
        cityIsModified = false;
        addressIsModified = false;
        lastNameIsModified = false;
        firstNameIsModified = false;
        clientIdIsModified = false;
    }

    /**
     * Copies the passed bean into the current bean.
     *
     * @param bean the bean to copy into the current bean
     */
    public void copy(ClientBean bean)
    {
        setLastUpdate(bean.getLastUpdate());
        setActiveYn(bean.getActiveYn());
        setMonthlyBillRate(bean.getMonthlyBillRate());
        setBillType(bean.getBillType());
        setNote(bean.getNote());
        setClientSinceDt(bean.getClientSinceDt());
        setEmail(bean.getEmail());
        setFax(bean.getFax());
        setCellPhone(bean.getCellPhone());
        setHomePhone(bean.getHomePhone());
        setWorkPhone(bean.getWorkPhone());
        setZip(bean.getZip());
        setState(bean.getState());
        setCity(bean.getCity());
        setAddress(bean.getAddress());
        setLastName(bean.getLastName());
        setFirstName(bean.getFirstName());
        setClientId(bean.getClientId());
    }

    /**
     * return a dictionnary of the object
     */
    public Map getDictionnary()
    {
        Map dictionnary = new HashMap();
        dictionnary.put("last_update", getLastUpdate() == null ? "" : getLastUpdate().toString());
        dictionnary.put("active_yn", getActiveYn() == null ? "" : getActiveYn().toString());
        dictionnary.put("monthly_bill_rate", getMonthlyBillRate() == null ? "" : getMonthlyBillRate().toString());
        dictionnary.put("bill_type", getBillType() == null ? "" : getBillType().toString());
        dictionnary.put("note", getNote() == null ? "" : getNote().toString());
        dictionnary.put("client_since_dt", getClientSinceDt() == null ? "" : getClientSinceDt().toString());
        dictionnary.put("email", getEmail() == null ? "" : getEmail().toString());
        dictionnary.put("fax", getFax() == null ? "" : getFax().toString());
        dictionnary.put("cell_phone", getCellPhone() == null ? "" : getCellPhone().toString());
        dictionnary.put("home_phone", getHomePhone() == null ? "" : getHomePhone().toString());
        dictionnary.put("work_phone", getWorkPhone() == null ? "" : getWorkPhone().toString());
        dictionnary.put("zip", getZip() == null ? "" : getZip().toString());
        dictionnary.put("state", getState() == null ? "" : getState().toString());
        dictionnary.put("city", getCity() == null ? "" : getCity().toString());
        dictionnary.put("address", getAddress() == null ? "" : getAddress().toString());
        dictionnary.put("last_name", getLastName() == null ? "" : getLastName().toString());
        dictionnary.put("first_name", getFirstName() == null ? "" : getFirstName().toString());
        dictionnary.put("client_id", getClientId() == null ? "" : getClientId().toString());
        return dictionnary;
    }

    /**
     * return a dictionnary of the pk columns
     */
    public Map getPkDictionnary()
    {
        Map dictionnary = new HashMap();
        dictionnary.put("client_id", getClientId() == null ? "" : getClientId().toString());
        return dictionnary;
    }

    /**
     * return a the value string representation of the given field
     */
    public String getValue(String column)
    {
        if (null == column || "".equals(column)) {
            return "";
        } else if ("last_update".equalsIgnoreCase(column) || "lastUpdate".equalsIgnoreCase(column)) {
            return getLastUpdate() == null ? "" : getLastUpdate().toString();
        } else if ("active_yn".equalsIgnoreCase(column) || "activeYn".equalsIgnoreCase(column)) {
            return getActiveYn() == null ? "" : getActiveYn().toString();
        } else if ("monthly_bill_rate".equalsIgnoreCase(column) || "monthlyBillRate".equalsIgnoreCase(column)) {
            return getMonthlyBillRate() == null ? "" : getMonthlyBillRate().toString();
        } else if ("bill_type".equalsIgnoreCase(column) || "billType".equalsIgnoreCase(column)) {
            return getBillType() == null ? "" : getBillType().toString();
        } else if ("note".equalsIgnoreCase(column) || "note".equalsIgnoreCase(column)) {
            return getNote() == null ? "" : getNote().toString();
        } else if ("client_since_dt".equalsIgnoreCase(column) || "clientSinceDt".equalsIgnoreCase(column)) {
            return getClientSinceDt() == null ? "" : getClientSinceDt().toString();
        } else if ("email".equalsIgnoreCase(column) || "email".equalsIgnoreCase(column)) {
            return getEmail() == null ? "" : getEmail().toString();
        } else if ("fax".equalsIgnoreCase(column) || "fax".equalsIgnoreCase(column)) {
            return getFax() == null ? "" : getFax().toString();
        } else if ("cell_phone".equalsIgnoreCase(column) || "cellPhone".equalsIgnoreCase(column)) {
            return getCellPhone() == null ? "" : getCellPhone().toString();
        } else if ("home_phone".equalsIgnoreCase(column) || "homePhone".equalsIgnoreCase(column)) {
            return getHomePhone() == null ? "" : getHomePhone().toString();
        } else if ("work_phone".equalsIgnoreCase(column) || "workPhone".equalsIgnoreCase(column)) {
            return getWorkPhone() == null ? "" : getWorkPhone().toString();
        } else if ("zip".equalsIgnoreCase(column) || "zip".equalsIgnoreCase(column)) {
            return getZip() == null ? "" : getZip().toString();
        } else if ("state".equalsIgnoreCase(column) || "state".equalsIgnoreCase(column)) {
            return getState() == null ? "" : getState().toString();
        } else if ("city".equalsIgnoreCase(column) || "city".equalsIgnoreCase(column)) {
            return getCity() == null ? "" : getCity().toString();
        } else if ("address".equalsIgnoreCase(column) || "address".equalsIgnoreCase(column)) {
            return getAddress() == null ? "" : getAddress().toString();
        } else if ("last_name".equalsIgnoreCase(column) || "lastName".equalsIgnoreCase(column)) {
            return getLastName() == null ? "" : getLastName().toString();
        } else if ("first_name".equalsIgnoreCase(column) || "firstName".equalsIgnoreCase(column)) {
            return getFirstName() == null ? "" : getFirstName().toString();
        } else if ("client_id".equalsIgnoreCase(column) || "clientId".equalsIgnoreCase(column)) {
            return getClientId() == null ? "" : getClientId().toString();
        }
        return "";
    }

    /**
     * @see java.lang.Object#equals(Object)
     */
    public boolean equals(Object object)
    {
        if (!(object instanceof ClientBean)) {
            return false;
        }

		ClientBean obj = (ClientBean) object;
		return new EqualsBuilder()
            .append(getLastUpdate(), obj.getLastUpdate())
            .append(getActiveYn(), obj.getActiveYn())
            .append(getMonthlyBillRate(), obj.getMonthlyBillRate())
            .append(getBillType(), obj.getBillType())
            .append(getNote(), obj.getNote())
            .append(getClientSinceDt(), obj.getClientSinceDt())
            .append(getEmail(), obj.getEmail())
            .append(getFax(), obj.getFax())
            .append(getCellPhone(), obj.getCellPhone())
            .append(getHomePhone(), obj.getHomePhone())
            .append(getWorkPhone(), obj.getWorkPhone())
            .append(getZip(), obj.getZip())
            .append(getState(), obj.getState())
            .append(getCity(), obj.getCity())
            .append(getAddress(), obj.getAddress())
            .append(getLastName(), obj.getLastName())
            .append(getFirstName(), obj.getFirstName())
            .append(getClientId(), obj.getClientId())
            .isEquals();
	}

	/**
	 * @see java.lang.Object#hashCode()
	 */
	public int hashCode()
	{
		return new HashCodeBuilder(-82280557, -700257973)
            .append(getLastUpdate())
            .append(getActiveYn())
            .append(getMonthlyBillRate())
            .append(getBillType())
            .append(getNote())
            .append(getClientSinceDt())
            .append(getEmail())
            .append(getFax())
            .append(getCellPhone())
            .append(getHomePhone())
            .append(getWorkPhone())
            .append(getZip())
            .append(getState())
            .append(getCity())
            .append(getAddress())
            .append(getLastName())
            .append(getFirstName())
            .append(getClientId())
            .toHashCode();
	}

	/**
	 * @see java.lang.Object#toString()
	 */
	public String toString()
	{
	    return toString(ToStringStyle.MULTI_LINE_STYLE);
	}

	/**
	 * you can use the following styles:
	 * <li>ToStringStyle.DEFAULT_STYLE</li>
	 * <li>ToStringStyle.MULTI_LINE_STYLE</li>
     * <li>ToStringStyle.NO_FIELD_NAMES_STYLE</li>
     * <li>ToStringStyle.SHORT_PREFIX_STYLE</li>
     * <li>ToStringStyle.SIMPLE_STYLE</li>
	 */
	public String toString(ToStringStyle style) {
		return new ToStringBuilder(this, style)
            .append("last_update", getLastUpdate())
            .append("active_yn", getActiveYn())
            .append("monthly_bill_rate", getMonthlyBillRate())
            .append("bill_type", getBillType())
            .append("note", getNote())
            .append("client_since_dt", getClientSinceDt())
            .append("email", getEmail())
            .append("fax", getFax())
            .append("cell_phone", getCellPhone())
            .append("home_phone", getHomePhone())
            .append("work_phone", getWorkPhone())
            .append("zip", getZip())
            .append("state", getState())
            .append("city", getCity())
            .append("address", getAddress())
            .append("last_name", getLastName())
            .append("first_name", getFirstName())
            .append("client_id", getClientId())
            .toString();
	}


    public int compareTo(Object object)
    {
        ClientBean obj = (ClientBean) object;
        return new CompareToBuilder()
            .append(getLastUpdate(), obj.getLastUpdate())
            .append(getActiveYn(), obj.getActiveYn())
            .append(getMonthlyBillRate(), obj.getMonthlyBillRate())
            .append(getBillType(), obj.getBillType())
            .append(getNote(), obj.getNote())
            .append(getClientSinceDt(), obj.getClientSinceDt())
            .append(getEmail(), obj.getEmail())
            .append(getFax(), obj.getFax())
            .append(getCellPhone(), obj.getCellPhone())
            .append(getHomePhone(), obj.getHomePhone())
            .append(getWorkPhone(), obj.getWorkPhone())
            .append(getZip(), obj.getZip())
            .append(getState(), obj.getState())
            .append(getCity(), obj.getCity())
            .append(getAddress(), obj.getAddress())
            .append(getLastName(), obj.getLastName())
            .append(getFirstName(), obj.getFirstName())
            .append(getClientId(), obj.getClientId())
            .toComparison();
   }
}
