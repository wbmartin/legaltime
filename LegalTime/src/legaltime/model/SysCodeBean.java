// ______________________________________________________
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: com.mysql.jdbc.Driver
//
// Please help us improve this tool by reporting:
// - problems and suggestions to
//   http://sourceforge.net/tracker/?group_id=54687
// - feedbacks and ideas on
//   http://sourceforge.net/forum/forum.php?forum_id=182208
// ______________________________________________________

package legaltime.model;

import java.io.Serializable;
import java.util.Map;
import java.util.HashMap;

import legaltime.model.GeneratedBean;

import org.apache.commons.lang.builder.CompareToBuilder;
import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;
import org.apache.commons.lang.builder.ToStringStyle;

/**
 * SysCodeBean is a mapping of sys_code Table.
 * @author sql2java
*/
public class SysCodeBean
    implements Serializable, GeneratedBean
{
	private static final long serialVersionUID = -4281134106825363749L;
	
    private java.util.Date lastUpdate;

    private boolean lastUpdateIsModified = false;
    private boolean lastUpdateIsInitialized = false;

    private String systemOrUser;

    private boolean systemOrUserIsModified = false;
    private boolean systemOrUserIsInitialized = false;

    private String description;

    private boolean descriptionIsModified = false;
    private boolean descriptionIsInitialized = false;

    private String codeId;

    private boolean codeIdIsModified = false;
    private boolean codeIdIsInitialized = false;

    private String codeType;

    private boolean codeTypeIsModified = false;
    private boolean codeTypeIsInitialized = false;

    private Integer sysCodeId;

    private boolean sysCodeIdIsModified = false;
    private boolean sysCodeIdIsInitialized = false;

    private boolean _isNew = true;

    /**
     * Prefered methods to create a SysCodeBean is via the createSysCodeBean method in SysCodeManager or
     * via the factory class SysCodeFactory create method
     */
    protected SysCodeBean()
    {
    }

    /**
     * Getter method for lastUpdate.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: sys_code.last_update</li>
     * <li>column size: 19</li>
     * <li>jdbc type returned by the driver: Types.TIMESTAMP</li>
     * </ul>
     *
     * @return the value of lastUpdate
     */
    public java.util.Date getLastUpdate()
    {
        return lastUpdate;
    }

    /**
     * Setter method for lastUpdate.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to lastUpdate
     */
    public void setLastUpdate(java.util.Date newVal)
    {
        if ((newVal != null && lastUpdate != null && (newVal.compareTo(lastUpdate) == 0)) ||
            (newVal == null && lastUpdate == null && lastUpdateIsInitialized)) {
            return;
        }
        lastUpdate = newVal;
        lastUpdateIsModified = true;
        lastUpdateIsInitialized = true;
    }

    /**
     * Setter method for lastUpdate.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to lastUpdate
     */
    public void setLastUpdate(long newVal)
    {
        setLastUpdate(new java.util.Date(newVal));
    }

    /**
     * Determines if the lastUpdate has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isLastUpdateModified()
    {
        return lastUpdateIsModified;
    }

    /**
     * Determines if the lastUpdate has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isLastUpdateInitialized()
    {
        return lastUpdateIsInitialized;
    }

    /**
     * Getter method for systemOrUser.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: sys_code.system_or_user</li>
     * <li>column size: 20</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of systemOrUser
     */
    public String getSystemOrUser()
    {
        return systemOrUser;
    }

    /**
     * Setter method for systemOrUser.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to systemOrUser
     */
    public void setSystemOrUser(String newVal)
    {
        if ((newVal != null && systemOrUser != null && (newVal.compareTo(systemOrUser) == 0)) ||
            (newVal == null && systemOrUser == null && systemOrUserIsInitialized)) {
            return;
        }
        systemOrUser = newVal;
        systemOrUserIsModified = true;
        systemOrUserIsInitialized = true;
    }

    /**
     * Determines if the systemOrUser has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isSystemOrUserModified()
    {
        return systemOrUserIsModified;
    }

    /**
     * Determines if the systemOrUser has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isSystemOrUserInitialized()
    {
        return systemOrUserIsInitialized;
    }

    /**
     * Getter method for description.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: sys_code.description</li>
     * <li>column size: 255</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of description
     */
    public String getDescription()
    {
        return description;
    }

    /**
     * Setter method for description.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to description
     */
    public void setDescription(String newVal)
    {
        if ((newVal != null && description != null && (newVal.compareTo(description) == 0)) ||
            (newVal == null && description == null && descriptionIsInitialized)) {
            return;
        }
        description = newVal;
        descriptionIsModified = true;
        descriptionIsInitialized = true;
    }

    /**
     * Determines if the description has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isDescriptionModified()
    {
        return descriptionIsModified;
    }

    /**
     * Determines if the description has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isDescriptionInitialized()
    {
        return descriptionIsInitialized;
    }

    /**
     * Getter method for codeId.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: sys_code.code_id</li>
     * <li>column size: 5</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of codeId
     */
    public String getCodeId()
    {
        return codeId;
    }

    /**
     * Setter method for codeId.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to codeId
     */
    public void setCodeId(String newVal)
    {
        if ((newVal != null && codeId != null && (newVal.compareTo(codeId) == 0)) ||
            (newVal == null && codeId == null && codeIdIsInitialized)) {
            return;
        }
        codeId = newVal;
        codeIdIsModified = true;
        codeIdIsInitialized = true;
    }

    /**
     * Determines if the codeId has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isCodeIdModified()
    {
        return codeIdIsModified;
    }

    /**
     * Determines if the codeId has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isCodeIdInitialized()
    {
        return codeIdIsInitialized;
    }

    /**
     * Getter method for codeType.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: sys_code.code_type</li>
     * <li>column size: 5</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of codeType
     */
    public String getCodeType()
    {
        return codeType;
    }

    /**
     * Setter method for codeType.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to codeType
     */
    public void setCodeType(String newVal)
    {
        if ((newVal != null && codeType != null && (newVal.compareTo(codeType) == 0)) ||
            (newVal == null && codeType == null && codeTypeIsInitialized)) {
            return;
        }
        codeType = newVal;
        codeTypeIsModified = true;
        codeTypeIsInitialized = true;
    }

    /**
     * Determines if the codeType has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isCodeTypeModified()
    {
        return codeTypeIsModified;
    }

    /**
     * Determines if the codeType has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isCodeTypeInitialized()
    {
        return codeTypeIsInitialized;
    }

    /**
     * Getter method for sysCodeId.
     * <br>
     * PRIMARY KEY.<br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: sys_code.sys_code_id</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of sysCodeId
     */
    public Integer getSysCodeId()
    {
        return sysCodeId;
    }

    /**
     * Setter method for sysCodeId.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to sysCodeId
     */
    public void setSysCodeId(Integer newVal)
    {
        if ((newVal != null && sysCodeId != null && (newVal.compareTo(sysCodeId) == 0)) ||
            (newVal == null && sysCodeId == null && sysCodeIdIsInitialized)) {
            return;
        }
        sysCodeId = newVal;
        sysCodeIdIsModified = true;
        sysCodeIdIsInitialized = true;
    }

    /**
     * Setter method for sysCodeId.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to sysCodeId
     */
    public void setSysCodeId(int newVal)
    {
        setSysCodeId(new Integer(newVal));
    }

    /**
     * Determines if the sysCodeId has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isSysCodeIdModified()
    {
        return sysCodeIdIsModified;
    }

    /**
     * Determines if the sysCodeId has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isSysCodeIdInitialized()
    {
        return sysCodeIdIsInitialized;
    }

    /**
     * Determines if the current object is new.
     *
     * @return true if the current object is new, false if the object is not new
     */
    public boolean isNew()
    {
        return _isNew;
    }

    /**
     * Specifies to the object if it has been set as new.
     *
     * @param isNew the boolean value to be assigned to the isNew field
     */
    public void isNew(boolean isNew)
    {
        this._isNew = isNew;
    }

    /**
     * Determines if the object has been modified since the last time this method was called.
     * <br>
     * We can also determine if this object has ever been modified since its creation.
     *
     * @return true if the object has been modified, false if the object has not been modified
     */
    public boolean isModified()
    {
        return lastUpdateIsModified 		|| systemOrUserIsModified  		|| descriptionIsModified  		|| codeIdIsModified  		|| codeTypeIsModified  		|| sysCodeIdIsModified  ;
    }

    /**
     * Resets the object modification status to 'not modified'.
     */
    public void resetIsModified()
    {
        lastUpdateIsModified = false;
        systemOrUserIsModified = false;
        descriptionIsModified = false;
        codeIdIsModified = false;
        codeTypeIsModified = false;
        sysCodeIdIsModified = false;
    }

    /**
     * Copies the passed bean into the current bean.
     *
     * @param bean the bean to copy into the current bean
     */
    public void copy(SysCodeBean bean)
    {
        setLastUpdate(bean.getLastUpdate());
        setSystemOrUser(bean.getSystemOrUser());
        setDescription(bean.getDescription());
        setCodeId(bean.getCodeId());
        setCodeType(bean.getCodeType());
        setSysCodeId(bean.getSysCodeId());
    }

    /**
     * return a dictionnary of the object
     */
    public Map getDictionnary()
    {
        Map dictionnary = new HashMap();
        dictionnary.put("last_update", getLastUpdate() == null ? "" : getLastUpdate().toString());
        dictionnary.put("system_or_user", getSystemOrUser() == null ? "" : getSystemOrUser().toString());
        dictionnary.put("description", getDescription() == null ? "" : getDescription().toString());
        dictionnary.put("code_id", getCodeId() == null ? "" : getCodeId().toString());
        dictionnary.put("code_type", getCodeType() == null ? "" : getCodeType().toString());
        dictionnary.put("sys_code_id", getSysCodeId() == null ? "" : getSysCodeId().toString());
        return dictionnary;
    }

    /**
     * return a dictionnary of the pk columns
     */
    public Map getPkDictionnary()
    {
        Map dictionnary = new HashMap();
        dictionnary.put("sys_code_id", getSysCodeId() == null ? "" : getSysCodeId().toString());
        return dictionnary;
    }

    /**
     * return a the value string representation of the given field
     */
    public String getValue(String column)
    {
        if (null == column || "".equals(column)) {
            return "";
        } else if ("last_update".equalsIgnoreCase(column) || "lastUpdate".equalsIgnoreCase(column)) {
            return getLastUpdate() == null ? "" : getLastUpdate().toString();
        } else if ("system_or_user".equalsIgnoreCase(column) || "systemOrUser".equalsIgnoreCase(column)) {
            return getSystemOrUser() == null ? "" : getSystemOrUser().toString();
        } else if ("description".equalsIgnoreCase(column) || "description".equalsIgnoreCase(column)) {
            return getDescription() == null ? "" : getDescription().toString();
        } else if ("code_id".equalsIgnoreCase(column) || "codeId".equalsIgnoreCase(column)) {
            return getCodeId() == null ? "" : getCodeId().toString();
        } else if ("code_type".equalsIgnoreCase(column) || "codeType".equalsIgnoreCase(column)) {
            return getCodeType() == null ? "" : getCodeType().toString();
        } else if ("sys_code_id".equalsIgnoreCase(column) || "sysCodeId".equalsIgnoreCase(column)) {
            return getSysCodeId() == null ? "" : getSysCodeId().toString();
        }
        return "";
    }

    /**
     * @see java.lang.Object#equals(Object)
     */
    public boolean equals(Object object)
    {
        if (!(object instanceof SysCodeBean)) {
            return false;
        }

		SysCodeBean obj = (SysCodeBean) object;
		return new EqualsBuilder()
            .append(getLastUpdate(), obj.getLastUpdate())
            .append(getSystemOrUser(), obj.getSystemOrUser())
            .append(getDescription(), obj.getDescription())
            .append(getCodeId(), obj.getCodeId())
            .append(getCodeType(), obj.getCodeType())
            .append(getSysCodeId(), obj.getSysCodeId())
            .isEquals();
	}

	/**
	 * @see java.lang.Object#hashCode()
	 */
	public int hashCode()
	{
		return new HashCodeBuilder(-82280557, -700257973)
            .append(getLastUpdate())
            .append(getSystemOrUser())
            .append(getDescription())
            .append(getCodeId())
            .append(getCodeType())
            .append(getSysCodeId())
            .toHashCode();
	}

	/**
	 * @see java.lang.Object#toString()
	 */
	public String toString()
	{
	    return toString(ToStringStyle.MULTI_LINE_STYLE);
	}

	/**
	 * you can use the following styles:
	 * <li>ToStringStyle.DEFAULT_STYLE</li>
	 * <li>ToStringStyle.MULTI_LINE_STYLE</li>
     * <li>ToStringStyle.NO_FIELD_NAMES_STYLE</li>
     * <li>ToStringStyle.SHORT_PREFIX_STYLE</li>
     * <li>ToStringStyle.SIMPLE_STYLE</li>
	 */
	public String toString(ToStringStyle style) {
		return new ToStringBuilder(this, style)
            .append("last_update", getLastUpdate())
            .append("system_or_user", getSystemOrUser())
            .append("description", getDescription())
            .append("code_id", getCodeId())
            .append("code_type", getCodeType())
            .append("sys_code_id", getSysCodeId())
            .toString();
	}


    public int compareTo(Object object)
    {
        SysCodeBean obj = (SysCodeBean) object;
        return new CompareToBuilder()
            .append(getLastUpdate(), obj.getLastUpdate())
            .append(getSystemOrUser(), obj.getSystemOrUser())
            .append(getDescription(), obj.getDescription())
            .append(getCodeId(), obj.getCodeId())
            .append(getCodeType(), obj.getCodeType())
            .append(getSysCodeId(), obj.getSysCodeId())
            .toComparison();
   }
}
